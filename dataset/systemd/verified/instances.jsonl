{"repo":"systemd/systemd","pull_number":34480,"instance_id":"systemd__systemd-34480","issue_numbers":["34478"],"base_commit":"4beac1034d51e3cedb79cedf57e274b02b690eeb","patch":"diff --git a/src/shared/seccomp-util.c b/src/shared/seccomp-util.c\nindex 1cd662513b8a4..e2261b0a52126 100644\n--- a/src/shared/seccomp-util.c\n+++ b/src/shared/seccomp-util.c\n@@ -879,6 +879,7 @@ const SyscallFilterSet syscall_filter_sets[_SYSCALL_FILTER_SET_MAX] = {\n                 .name = \"@sync\",\n                 .help = \"Synchronize files and memory to storage\",\n                 .value =\n+                /* Please also update the list in seccomp_suppress_sync(). */\n                 \"fdatasync\\0\"\n                 \"fsync\\0\"\n                 \"msync\\0\"\n@@ -2464,8 +2465,10 @@ int seccomp_suppress_sync(void) {\n         uint32_t arch;\n         int r;\n \n-        /* This is mostly identical to SystemCallFilter=~@sync:0, but simpler to use, and separately\n-         * manageable, and also masks O_SYNC/O_DSYNC */\n+        /* This behaves slightly differently from SystemCallFilter=~@sync:0, in that negative fds (which\n+         * we can determine to be invalid) are still refused with EBADF. See #34478.\n+         *\n+         * Additionally, O_SYNC/O_DSYNC are masked. */\n \n         SECCOMP_FOREACH_LOCAL_ARCH(arch) {\n                 _cleanup_(seccomp_releasep) scmp_filter_ctx seccomp = NULL;\n@@ -2483,11 +2486,21 @@ int seccomp_suppress_sync(void) {\n                                 continue;\n                         }\n \n-                        r = seccomp_rule_add_exact(\n-                                        seccomp,\n-                                        SCMP_ACT_ERRNO(0), /* success → we want this to be a NOP after all */\n-                                        id,\n-                                        0);\n+                        if (STR_IN_SET(c, \"fdatasync\", \"fsync\", \"sync_file_range\", \"sync_file_range2\", \"syncfs\"))\n+                                r = seccomp_rule_add_exact(\n+                                                seccomp,\n+                                                SCMP_ACT_ERRNO(0), /* success → we want this to be a NOP after all */\n+                                                id,\n+                                                1,\n+                                                SCMP_A0(SCMP_CMP_LE, INT_MAX)); /* The rule handles arguments in unsigned. Hence, this\n+                                                                                 * means non-negative fd matches the rule, and the negative\n+                                                                                 * fd passed to the syscall (then it fails with EBADF). */\n+                        else\n+                                r = seccomp_rule_add_exact(\n+                                                seccomp,\n+                                                SCMP_ACT_ERRNO(0), /* success → we want this to be a NOP after all */\n+                                                id,\n+                                                0);\n                         if (r < 0)\n                                 log_debug_errno(r, \"Failed to add filter for system call %s, ignoring: %m\", c);\n                 }\n","test_patch":"diff --git a/src/test/test-seccomp.c b/src/test/test-seccomp.c\nindex 74d950ad1c0a0..459708ee00c28 100644\n--- a/src/test/test-seccomp.c\n+++ b/src/test/test-seccomp.c\n@@ -18,6 +18,7 @@\n #include \"capability-util.h\"\n #include \"fd-util.h\"\n #include \"fileio.h\"\n+#include \"fs-util.h\"\n #include \"macro.h\"\n #include \"memory-util.h\"\n #include \"missing_sched.h\"\n@@ -1229,4 +1230,55 @@ TEST(restrict_suid_sgid) {\n         assert_se(wait_for_terminate_and_check(\"suidsgidseccomp\", pid, WAIT_LOG) == EXIT_SUCCESS);\n }\n \n+static void test_seccomp_suppress_sync_child(void) {\n+        _cleanup_(unlink_and_freep) char *path = NULL;\n+        _cleanup_close_ int fd = -EBADF;\n+\n+        ASSERT_OK(tempfn_random(\"/tmp/seccomp_suppress_sync\", NULL, &path));\n+        ASSERT_OK_ERRNO(fd = open(path, O_RDWR | O_CREAT | O_SYNC | O_CLOEXEC, 0666));\n+        fd = safe_close(fd);\n+\n+        ASSERT_ERROR_ERRNO(fdatasync(-1), EBADF);\n+        ASSERT_ERROR_ERRNO(fsync(-1), EBADF);\n+        ASSERT_ERROR_ERRNO(syncfs(-1), EBADF);\n+\n+        ASSERT_ERROR_ERRNO(fdatasync(INT_MAX), EBADF);\n+        ASSERT_ERROR_ERRNO(fsync(INT_MAX), EBADF);\n+        ASSERT_ERROR_ERRNO(syncfs(INT_MAX), EBADF);\n+\n+        ASSERT_OK(seccomp_suppress_sync());\n+\n+        ASSERT_ERROR_ERRNO(fd = open(path, O_RDWR | O_CREAT | O_SYNC | O_CLOEXEC, 0666), EINVAL);\n+\n+        ASSERT_OK_ERRNO(fdatasync(INT_MAX));\n+        ASSERT_OK_ERRNO(fsync(INT_MAX));\n+        ASSERT_OK_ERRNO(syncfs(INT_MAX));\n+\n+        ASSERT_ERROR_ERRNO(fdatasync(-1), EBADF);\n+        ASSERT_ERROR_ERRNO(fsync(-1), EBADF);\n+        ASSERT_ERROR_ERRNO(syncfs(-1), EBADF);\n+}\n+\n+TEST(seccomp_suppress_sync) {\n+        pid_t pid;\n+\n+        if (!is_seccomp_available()) {\n+                log_notice(\"Seccomp not available, skipping %s\", __func__);\n+                return;\n+        }\n+        if (!have_seccomp_privs()) {\n+                log_notice(\"Not privileged, skipping %s\", __func__);\n+                return;\n+        }\n+\n+        ASSERT_OK_ERRNO(pid = fork());\n+\n+        if (pid == 0) {\n+                test_seccomp_suppress_sync_child();\n+                _exit(EXIT_SUCCESS);\n+        }\n+\n+        ASSERT_EQ(wait_for_terminate_and_check(\"seccomp_suppress_sync\", pid, WAIT_LOG), EXIT_SUCCESS);\n+}\n+\n DEFINE_TEST_MAIN(LOG_DEBUG);\n","problem_statement":"systemd-nspawn `--suppress-sync=true` also suppresses fd validation in `fsync()`\n### systemd version the issue has been seen with\n\n256.5\n\n### Used distribution\n\nGentoo Linux\n\n### Linux kernel version used\n\n6.10.10-gentoo-dist\n\n### CPU architectures issue was seen on\n\nx86_64\n\n### Component\n\nsystemd-nspawn\n\n### Expected behaviour you didn't see\n\n_No response_\n\n### Unexpected behaviour you saw\n\n`fsync()` (and related calls) returns 0 when passed invalid fd and `--suppress-sync=true` is used.\r\n\r\nThis is causing CPython's test suite to fail.\n\n### Steps to reproduce the problem\n\n1. Enter a container with `systemd-nspawn --suppress-sync=true`.\r\n2. Compile and run the following program:\r\n    ```c\r\n    #include <stdio.h>\r\n    #include <unistd.h>\r\n    \r\n    int main() {\r\n            printf(\"fdatasync() = %d\\n\", fdatasync(-1));\r\n            perror(\"errno\");\r\n            return 0;\r\n    }\r\n    ```\n\n### Additional program output to the terminal or log subsystem illustrating the issue\n\n```sh\nfdatasync = 0\r\nerrno: Success\r\n\r\n(while without --suppress-sync=true, it gives:\r\nfdatasync = -1\r\nerrno: Bad file descriptor\r\n)\n```\n\n","hints_text":"I cannot reproduce the issue. With #34480, the test binary expectedly fails:\r\n```\r\n$ sudo build/systemd-nspawn -xD / --suppress-sync=yes\r\n░ Spawning container thinkpad-x280-f8767b626563378f on /.#machine.26cb0cda4709bf66.\r\n░ Press Ctrl-] three times within 1s to kill container.\r\nroot@thinkpad-x280-f8767b626563378f:~# /path/to/build/test-seccomp\r\n(snip)\r\n/* test_seccomp_suppress_sync */\r\nsrc/test/test-seccomp.c:1248: Assertion failed: expected \"fdatasync(-1)\" to fail with error \"Bad file descriptor\", but it succeeded\r\nseccomp_suppress_sync terminated by signal ABRT.\r\nAssertion 'wait_for_terminate_and_check(\"seccomp_suppress_sync\", pid, WAIT_LOG) == EXIT_SUCCESS' failed at src/test/test-seccomp.c:1261, function test_seccomp_suppress_sync(). Aborting.\r\nAborted (core dumped)\r\n```\r\nOf course, the test succeeds when --suppress-sync=no.\nIs your systemd-nspawn built with SECCOMP support??\r\nPlease check `systemd-nspawn --version` shows `+SECCOMP`.\n> I cannot reproduce the issue. With #34480, the test binary expectedly fails:\n> ```\n> $ sudo build/systemd-nspawn -xD / --suppress-sync=yes\n> ░ Spawning container thinkpad-x280-f8767b626563378f on /.#machine.26cb0cda4709bf66.\n> ░ Press Ctrl-] three times within 1s to kill container.\n> root@thinkpad-x280-f8767b626563378f:~# /path/to/build/test-seccomp\n> (snip)\n> /* test_seccomp_suppress_sync */\n> src/test/test-seccomp.c:1248: Assertion failed: expected \"fdatasync(-1)\" to fail with error \"Bad file descriptor\", but it succeeded\n> seccomp_suppress_sync terminated by signal ABRT.\n> Assertion 'wait_for_terminate_and_check(\"seccomp_suppress_sync\", pid, WAIT_LOG) == EXIT_SUCCESS' failed at src/test/test-seccomp.c:1261, function test_seccomp_suppress_sync(). Aborting.\n> Aborted (core dumped)\n> ```\n> Of course, the test succeeds when --suppress-sync=no.\n\nHmm? That's exactly the issue here, no? The error clearly shows that fdatasync() unexpectedly succeeded.\n\n> Hmm? That's exactly the issue here, no? The error clearly shows that fdatasync() unexpectedly succeeded.\r\n\r\nWhen `--suppress-sync=yes`, `fdatasync(-1)` should succeed, and the test case added in #34480 will fail, as the test assumes that no seccomp filter for sync related syscalls are installed and expects the call fails.\r\nWhen `--suppress-sync=no`, `fdstasync(-1)` should fail, and the test case will succeed as expected.\nAnyway, please check the below at first:\r\n> Please check `systemd-nspawn --version` shows `+SECCOMP`.\n> When `--suppress-sync=yes`, `fdatasync(-1)` should succeed, and the test case added in #34480 will fail, as the test assumes that no seccomp filter for sync related syscalls are installed and expects the call fails.\r\n\r\nIn my opinion, it shouldn't succeed. The documentation says that it:\r\n\r\n> turns off any form of on-disk file system synchronization for the container payload. This means all system calls such as sync(2), fsync(), syncfs(), ... will execute no operation […].\r\n\r\nHowever, even if the call doesn't do anything, it is supposed to return an appropriate error if called with invalid arguments, according to POSIX.\n> Anyway, please check the below at first:\r\n> \r\n> > Please check `systemd-nspawn --version` shows `+SECCOMP`.\r\n\r\nYes, it does.\r\n\r\n```\r\nsystemd 256 (256.5)\r\n+PAM +AUDIT -SELINUX -APPARMOR +IMA +SMACK +SECCOMP +GCRYPT +GNUTLS +OPENSSL +ACL +BLKID +CURL +ELFUTILS -FIDO2 +IDN2 -IDN -IPTC +KMOD -LIBCRYPTSETUP -LIBCRYPTSETUP_PLUGINS +LIBFDISK +PCRE2 -PWQUALITY -P11KIT +QRENCODE +TPM2 +BZIP2 +LZ4 +XZ +ZLIB +ZSTD -BPF_FRAMEWORK -XKBCOMMON +UTMP -SYSVINIT +LIBARCHIVE\r\n```\n> When --suppress-sync=yes, fdatasync(-1) should succeed\n\nAgain, this is what the whole report is about...\nAh, I misunderstood the report.\r\n\r\nThe behavior is expected. `--suppress-sync=yes` installs seccomp filter for fsync and friends to make they unconditionally succeed. So, even an invalid fd is passed, it succeeds.\nI think the original reporter has a point: to minimize unexpected breakages by --suppress-sync= we should probably extend our seccomp filter to return EBADF on negative fds. I mean, the goal with that option is to just speed up things, but from app pov it shouldn't change behaviour as much as possible.\r\n\r\ni mean, everything has boundaries: tweaking the seccomp filter to refuse negative fds should be fairly easy. But tweaking it to refuse positive-but-invalid fds would be too much to ask, and simply not implementable via seccomp. But just because we cannot do the latter, we still should do the former.","created_at":"2024-09-18T16:56:35Z","url":"https://github.com/systemd/systemd/pull/34480","version":"34480","related_issues":[{"number":34478,"title":"systemd-nspawn `--suppress-sync=true` also suppresses fd validation in `fsync()`","body":"### systemd version the issue has been seen with\n\n256.5\n\n### Used distribution\n\nGentoo Linux\n\n### Linux kernel version used\n\n6.10.10-gentoo-dist\n\n### CPU architectures issue was seen on\n\nx86_64\n\n### Component\n\nsystemd-nspawn\n\n### Expected behaviour you didn't see\n\n_No response_\n\n### Unexpected behaviour you saw\n\n`fsync()` (and related calls) returns 0 when passed invalid fd and `--suppress-sync=true` is used.\r\n\r\nThis is causing CPython's test suite to fail.\n\n### Steps to reproduce the problem\n\n1. Enter a container with `systemd-nspawn --suppress-sync=true`.\r\n2. Compile and run the following program:\r\n    ```c\r\n    #include <stdio.h>\r\n    #include <unistd.h>\r\n    \r\n    int main() {\r\n            printf(\"fdatasync() = %d\\n\", fdatasync(-1));\r\n            perror(\"errno\");\r\n            return 0;\r\n    }\r\n    ```\n\n### Additional program output to the terminal or log subsystem illustrating the issue\n\n```sh\nfdatasync = 0\r\nerrno: Success\r\n\r\n(while without --suppress-sync=true, it gives:\r\nfdatasync = -1\r\nerrno: Bad file descriptor\r\n)\n```\n","url":"https://github.com/systemd/systemd/issues/34478","labels":["nspawn","not-a-bug"]}],"body":"Closes #34478.","title":"seccomp-util: pass negative fds as is to fsync() and friends","FAIL_TO_PASS":["test_seccomp_suppress_sync"],"PASS_TO_PASS":["test_parse_syscall_and_errno","test_seccomp_arch_to_string","test_architecture_table","test_syscall_filter_set_find","test_filter_sets","test_filter_sets_ordered","test_restrict_namespace","test_protect_sysctl","test_protect_syslog","test_restrict_address_families","test_restrict_realtime","test_memory_deny_write_execute_mmap","test_memory_deny_write_execute_shmat","test_restrict_archs","test_load_syscall_filter_set_raw","test_native_syscalls_filtered","test_lock_personality","test_restrict_suid_sgid"]}
