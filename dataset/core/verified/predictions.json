[
  {
    "instance_id": "vuejs__core-11899",
    "model_patch": "diff --git a/packages/compiler-sfc/src/style/pluginScoped.ts b/packages/compiler-sfc/src/style/pluginScoped.ts\nindex 6a588b56726..b0224cf20d8 100644\n--- a/packages/compiler-sfc/src/style/pluginScoped.ts\n+++ b/packages/compiler-sfc/src/style/pluginScoped.ts\n@@ -233,16 +233,12 @@ function rewriteSelector(\n \n   if (rule.nodes.some(node => node.type === 'rule')) {\n     const deep = (rule as any).__deep\n-    const decls = rule.nodes.filter(node => node.type === 'decl')\n-    if (!deep && decls.length) {\n-      for (const decl of decls) {\n-        rule.removeChild(decl)\n+    if (!deep) {\n+      extractAndWrapNodes(rule)\n+      const atruleNodes = rule.nodes.filter(node => node.type === 'atrule')\n+      for (const atnode of atruleNodes) {\n+        extractAndWrapNodes(atnode)\n       }\n-      const hostRule = new Rule({\n-        nodes: decls,\n-        selector: '&',\n-      })\n-      rule.prepend(hostRule)\n     }\n     shouldInject = deep\n   }\n@@ -286,5 +282,22 @@ function isSpaceCombinator(node: selectorParser.Node) {\n   return node.type === 'combinator' && /^\\s+$/.test(node.value)\n }\n \n+function extractAndWrapNodes(parentNode: Rule | AtRule) {\n+  if (!parentNode.nodes) return\n+  const nodes = parentNode.nodes.filter(\n+    node => node.type === 'decl' || node.type === 'comment',\n+  )\n+  if (nodes.length) {\n+    for (const node of nodes) {\n+      parentNode.removeChild(node)\n+    }\n+    const wrappedRule = new Rule({\n+      nodes: nodes,\n+      selector: '&',\n+    })\n+    parentNode.prepend(wrappedRule)\n+  }\n+}\n+\n scopedPlugin.postcss = true\n export default scopedPlugin\n",
    "model_name_or_path": "gold"
  }
]
