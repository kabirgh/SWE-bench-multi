[
  {
    "instance_id": "caddyserver__caddy-6411",
    "model_patch": "diff --git a/replacer.go b/replacer.go\nindex e5d2913e928..41027fd8e67 100644\n--- a/replacer.go\n+++ b/replacer.go\n@@ -354,7 +354,9 @@ func (f fileReplacementProvider) replace(key string) (any, bool) {\n \t\t\tzap.Error(err))\n \t\treturn nil, true\n \t}\n-\treturn string(body), true\n+\tcontent := string(body)\n+\tcontent = strings.TrimSuffix(content, \"\\n\")\n+\treturn content, true\n }\n \n // globalDefaultReplacementsProvider handles replacements\n\ndiff --git a/replacer.go b/replacer.go\nindex 41027fd8e67..d0533b36e26 100644\n--- a/replacer.go\n+++ b/replacer.go\n@@ -355,8 +355,14 @@ func (f fileReplacementProvider) replace(key string) (any, bool) {\n \t\treturn nil, true\n \t}\n \tcontent := string(body)\n-\tcontent = strings.TrimSuffix(content, \"\\n\")\n-\treturn content, true\n+\t// Remove a single trailing newline, regardless of its type\n+\tif strings.HasSuffix(content, \"\\r\\n\") {\n+\t\treturn strings.TrimSuffix(content, \"\\r\\n\"), true\n+\t}\n+\tif strings.HasSuffix(content, \"\\n\") {\n+\t\treturn strings.TrimSuffix(content, \"\\n\"), true\n+\t}\n+\treturn strings.TrimSuffix(content, \"\\r\"), true\n }\n \n // globalDefaultReplacementsProvider handles replacements\n\n\ndiff --git a/replacer.go b/replacer.go\nindex d0533b36e26..79fde910bbc 100644\n--- a/replacer.go\n+++ b/replacer.go\n@@ -355,14 +355,9 @@ func (f fileReplacementProvider) replace(key string) (any, bool) {\n \t\treturn nil, true\n \t}\n \tcontent := string(body)\n-\t// Remove a single trailing newline, regardless of its type\n-\tif strings.HasSuffix(content, \"\\r\\n\") {\n-\t\treturn strings.TrimSuffix(content, \"\\r\\n\"), true\n-\t}\n-\tif strings.HasSuffix(content, \"\\n\") {\n-\t\treturn strings.TrimSuffix(content, \"\\n\"), true\n-\t}\n-\treturn strings.TrimSuffix(content, \"\\r\"), true\n+\tcontent = strings.TrimSuffix(content, \"\\n\")\n+\tcontent = strings.TrimSuffix(content, \"\\r\")\n+\treturn content, true\n }\n \n // globalDefaultReplacementsProvider handles replacements\n\n\ndiff --git a/replacer.go b/replacer.go\nindex 79fde910bbc..65815c92aec 100644\n--- a/replacer.go\n+++ b/replacer.go\n@@ -15,6 +15,7 @@\n package caddy\n \n import (\n+\t\"bytes\"\n \t\"fmt\"\n \t\"io\"\n \t\"net/http\"\n@@ -354,10 +355,9 @@ func (f fileReplacementProvider) replace(key string) (any, bool) {\n \t\t\tzap.Error(err))\n \t\treturn nil, true\n \t}\n-\tcontent := string(body)\n-\tcontent = strings.TrimSuffix(content, \"\\n\")\n-\tcontent = strings.TrimSuffix(content, \"\\r\")\n-\treturn content, true\n+\tbody = bytes.TrimSuffix(body, []byte(\"\\n\"))\n+\tbody = bytes.TrimSuffix(body, []byte(\"\\r\"))\n+\treturn string(body), true\n }\n \n // globalDefaultReplacementsProvider handles replacements\n",
    "model_name_or_path": "gold"
  },
  {
    "instance_id": "caddyserver__caddy-6345",
    "model_patch": "diff --git a/modules/caddypki/acmeserver/caddyfile.go b/modules/caddypki/acmeserver/caddyfile.go\nindex 7eaaec49a40..c4d11112861 100644\n--- a/modules/caddypki/acmeserver/caddyfile.go\n+++ b/modules/caddypki/acmeserver/caddyfile.go\n@@ -42,6 +42,7 @@ func init() {\n //\t\t\tdomains <domains...>\n //\t\t\tip_ranges <addresses...>\n //\t\t}\n+//\t\tsign_with_root\n //\t}\n func parseACMEServer(h httpcaddyfile.Helper) ([]httpcaddyfile.ConfigValue, error) {\n \th.Next() // consume directive name\n@@ -136,6 +137,11 @@ func parseACMEServer(h httpcaddyfile.Helper) ([]httpcaddyfile.ConfigValue, error\n \t\t\t\tacmeServer.Policy = &Policy{}\n \t\t\t}\n \t\t\tacmeServer.Policy.Deny = r\n+\t\tcase \"sign_with_root\":\n+\t\t\tif h.NextArg() {\n+\t\t\t\treturn nil, h.ArgErr()\n+\t\t\t}\n+\t\t\tacmeServer.SignWithRoot = true\n \t\tdefault:\n \t\t\treturn nil, h.Errf(\"unrecognized ACME server directive: %s\", h.Val())\n \t\t}\n\n",
    "model_name_or_path": "gold"
  },
  {
    "instance_id": "caddyserver__caddy-6115",
    "model_patch": "diff --git a/modules/caddyhttp/reverseproxy/selectionpolicies.go b/modules/caddyhttp/reverseproxy/selectionpolicies.go\nindex b56c8074cec..b6f807c16d2 100644\n--- a/modules/caddyhttp/reverseproxy/selectionpolicies.go\n+++ b/modules/caddyhttp/reverseproxy/selectionpolicies.go\n@@ -655,12 +655,22 @@ func (s CookieHashSelection) Select(pool UpstreamPool, req *http.Request, w http\n \t\tif err != nil {\n \t\t\treturn upstream\n \t\t}\n-\t\thttp.SetCookie(w, &http.Cookie{\n+\t\tcookie := &http.Cookie{\n \t\t\tName:   s.Name,\n \t\t\tValue:  sha,\n \t\t\tPath:   \"/\",\n \t\t\tSecure: false,\n-\t\t})\n+\t\t}\n+\t\tisProxyHttps := false\n+\t\tif trusted, ok := caddyhttp.GetVar(req.Context(), caddyhttp.TrustedProxyVarKey).(bool); ok && trusted {\n+\t\t\txfp, xfpOk, _ := lastHeaderValue(req.Header, \"X-Forwarded-Proto\")\n+\t\t\tisProxyHttps = xfpOk && xfp == \"https\"\n+\t\t}\n+\t\tif req.TLS != nil || isProxyHttps {\n+\t\t\tcookie.Secure = true\n+\t\t\tcookie.SameSite = http.SameSiteNoneMode\n+\t\t}\n+\t\thttp.SetCookie(w, cookie)\n \t\treturn upstream\n \t}\n \n",
    "model_name_or_path": "gold"
  },
  {
    "instance_id": "caddyserver__caddy-6051",
    "model_patch": "diff --git a/caddyconfig/caddyfile/lexer.go b/caddyconfig/caddyfile/lexer.go\nindex bfd6c0f50bd..e5026738b4e 100644\n--- a/caddyconfig/caddyfile/lexer.go\n+++ b/caddyconfig/caddyfile/lexer.go\n@@ -313,6 +313,11 @@ func (l *lexer) finalizeHeredoc(val []rune, marker string) ([]rune, error) {\n \t// iterate over each line and strip the whitespace from the front\n \tvar out string\n \tfor lineNum, lineText := range lines[:len(lines)-1] {\n+\t\tif lineText == \"\" {\n+\t\t\tout += \"\\n\"\n+\t\t\tcontinue\n+\t\t}\n+\n \t\t// find an exact match for the padding\n \t\tindex := strings.Index(lineText, paddingToStrip)\n \n",
    "model_name_or_path": "gold"
  },
  {
    "instance_id": "caddyserver__caddy-5404",
    "model_patch": "diff --git a/caddyconfig/caddyfile/lexer.go b/caddyconfig/caddyfile/lexer.go\nindex ba8b8798796..0b62e883bd8 100644\n--- a/caddyconfig/caddyfile/lexer.go\n+++ b/caddyconfig/caddyfile/lexer.go\n@@ -284,15 +284,17 @@ func (l *lexer) next() (bool, error) {\n // and processes the text to strip leading whitespace, returning the final\n // value without the leading whitespace.\n func (l *lexer) finalizeHeredoc(val []rune, marker string) ([]rune, error) {\n+\tstringVal := string(val)\n+\n \t// find the last newline of the heredoc, which is where the contents end\n-\tlastNewline := strings.LastIndex(string(val), \"\\n\")\n+\tlastNewline := strings.LastIndex(stringVal, \"\\n\")\n \n \t// collapse the content, then split into separate lines\n-\tlines := strings.Split(string(val[:lastNewline+1]), \"\\n\")\n+\tlines := strings.Split(stringVal[:lastNewline+1], \"\\n\")\n \n \t// figure out how much whitespace we need to strip from the front of every line\n \t// by getting the string that precedes the marker, on the last line\n-\tpaddingToStrip := string(val[lastNewline+1 : len(val)-len(marker)])\n+\tpaddingToStrip := stringVal[lastNewline+1 : len(stringVal)-len(marker)]\n \n \t// iterate over each line and strip the whitespace from the front\n \tvar out string\n\ndiff --git a/caddyconfig/caddyfile/lexer.go b/caddyconfig/caddyfile/lexer.go\nindex 0b62e883bd8..1f531f454d1 100644\n--- a/caddyconfig/caddyfile/lexer.go\n+++ b/caddyconfig/caddyfile/lexer.go\n@@ -312,6 +312,11 @@ func (l *lexer) finalizeHeredoc(val []rune, marker string) ([]rune, error) {\n \t\tout += strings.ReplaceAll(lineText[len(paddingToStrip):]+\"\\n\", \"\\r\", \"\")\n \t}\n \n+\t// Remove the trailing newline from the loop\n+\tif len(out) > 0 && out[len(out)-1] == '\\n' {\n+\t\tout = out[:len(out)-1]\n+\t}\n+\n \t// return the final value\n \treturn []rune(out), nil\n }\n@@ -342,9 +347,9 @@ func (t Token) NumLineBreaks() int {\n \tlineBreaks := strings.Count(t.Text, \"\\n\")\n \tif t.wasQuoted == '<' {\n \t\t// heredocs have an extra linebreak because the opening\n-\t\t// delimiter is on its own line and is not included in\n-\t\t// the token Text itself\n-\t\tlineBreaks++\n+\t\t// delimiter is on its own line and is not included in the\n+\t\t// token Text itself, and the trailing newline is removed.\n+\t\tlineBreaks += 2\n \t}\n \treturn lineBreaks\n }\n",
    "model_name_or_path": "gold"
  }
]
