+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   tsdb/head_append.go

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	tsdb.test

no changes added to commit (use "git add" and/or "git commit -a")
+ git diff 9071913fd99fcdea9ea069b277f2be66b08e549c
diff --git a/tsdb/head_append.go b/tsdb/head_append.go
index 901694375..d1f4d3035 100644
--- a/tsdb/head_append.go
+++ b/tsdb/head_append.go
@@ -1282,9 +1282,6 @@ func (s *memSeries) appendPreprocessor(t int64, e chunkenc.Encoding, o chunkOpts
 		// There is no head chunk in this series yet, create the first chunk for the sample.
 		c = s.cutNewHeadChunk(t, e, o.chunkRange)
 		chunkCreated = true
-	} else if len(c.chunk.Bytes()) > maxBytesPerXORChunk {
-		c = s.cutNewHeadChunk(t, e, o.chunkRange)
-		chunkCreated = true
 	}
 
 	// Out of order sample.
@@ -1292,6 +1289,12 @@ func (s *memSeries) appendPreprocessor(t int64, e chunkenc.Encoding, o chunkOpts
 		return c, false, chunkCreated
 	}
 
+	// Check the chunk size, unless we just created it and if the chunk is too large, cut a new one.
+	if !chunkCreated && len(c.chunk.Bytes()) > maxBytesPerXORChunk {
+		c = s.cutNewHeadChunk(t, e, o.chunkRange)
+		chunkCreated = true
+	}
+
 	if c.chunk.Encoding() != e {
 		// The chunk encoding expected by this append is different than the head chunk's
 		// encoding. So we cut a new chunk with the expected encoding.
+ git checkout 9071913fd99fcdea9ea069b277f2be66b08e549c tsdb/head_test.go
Updated 0 paths from b2b815ef3
+ git apply -v -
Checking patch tsdb/head_test.go...
Applied patch tsdb/head_test.go cleanly.
+ go test -v ./tsdb -run '^TestHead'
=== RUN   TestHeadCompactionWithHistograms
=== RUN   TestHeadCompactionWithHistograms/float=true
=== RUN   TestHeadCompactionWithHistograms/float=false
--- PASS: TestHeadCompactionWithHistograms (0.38s)
    --- PASS: TestHeadCompactionWithHistograms/float=true (0.29s)
    --- PASS: TestHeadCompactionWithHistograms/float=false (0.10s)
=== RUN   TestHead_HighConcurrencyReadAndWrite
--- PASS: TestHead_HighConcurrencyReadAndWrite (0.62s)
=== RUN   TestHead_ReadWAL
=== RUN   TestHead_ReadWAL/compress=none
=== RUN   TestHead_ReadWAL/compress=snappy
=== RUN   TestHead_ReadWAL/compress=zstd
--- PASS: TestHead_ReadWAL (0.07s)
    --- PASS: TestHead_ReadWAL/compress=none (0.03s)
    --- PASS: TestHead_ReadWAL/compress=snappy (0.02s)
    --- PASS: TestHead_ReadWAL/compress=zstd (0.03s)
=== RUN   TestHead_WALMultiRef
--- PASS: TestHead_WALMultiRef (0.07s)
=== RUN   TestHead_ActiveAppenders
--- PASS: TestHead_ActiveAppenders (0.01s)
=== RUN   TestHead_UnknownWALRecord
--- PASS: TestHead_UnknownWALRecord (0.03s)
=== RUN   TestHead_Truncate
--- PASS: TestHead_Truncate (0.03s)
=== RUN   TestHeadDeleteSeriesWithoutSamples
=== RUN   TestHeadDeleteSeriesWithoutSamples/compress=none
=== RUN   TestHeadDeleteSeriesWithoutSamples/compress=snappy
=== RUN   TestHeadDeleteSeriesWithoutSamples/compress=zstd
--- PASS: TestHeadDeleteSeriesWithoutSamples (0.08s)
    --- PASS: TestHeadDeleteSeriesWithoutSamples/compress=none (0.02s)
    --- PASS: TestHeadDeleteSeriesWithoutSamples/compress=snappy (0.02s)
    --- PASS: TestHeadDeleteSeriesWithoutSamples/compress=zstd (0.03s)
=== RUN   TestHeadDeleteSimple
=== RUN   TestHeadDeleteSimple/compress=none
=== RUN   TestHeadDeleteSimple/compress=snappy
=== RUN   TestHeadDeleteSimple/compress=zstd
--- PASS: TestHeadDeleteSimple (0.88s)
    --- PASS: TestHeadDeleteSimple/compress=none (0.27s)
    --- PASS: TestHeadDeleteSimple/compress=snappy (0.26s)
    --- PASS: TestHeadDeleteSimple/compress=zstd (0.35s)
=== RUN   TestHead_LogRollback
=== RUN   TestHead_LogRollback/compress=none
=== RUN   TestHead_LogRollback/compress=snappy
=== RUN   TestHead_LogRollback/compress=zstd
--- PASS: TestHead_LogRollback (0.06s)
    --- PASS: TestHead_LogRollback/compress=none (0.01s)
    --- PASS: TestHead_LogRollback/compress=snappy (0.01s)
    --- PASS: TestHead_LogRollback/compress=zstd (0.03s)
=== RUN   TestHeadReadWriterRepair
--- PASS: TestHeadReadWriterRepair (0.06s)
=== RUN   TestHeadSeriesChunkRace
--- PASS: TestHeadSeriesChunkRace (25.27s)
=== RUN   TestHeadLabelNamesValuesWithMinMaxRange
=== RUN   TestHeadLabelNamesValuesWithMinMaxRange/maxt_less_than_head_min
=== RUN   TestHeadLabelNamesValuesWithMinMaxRange/mint_less_than_head_max
=== RUN   TestHeadLabelNamesValuesWithMinMaxRange/mint_and_maxt_outside_head
=== RUN   TestHeadLabelNamesValuesWithMinMaxRange/mint_and_maxt_within_head
--- PASS: TestHeadLabelNamesValuesWithMinMaxRange (0.02s)
    --- PASS: TestHeadLabelNamesValuesWithMinMaxRange/maxt_less_than_head_min (0.00s)
    --- PASS: TestHeadLabelNamesValuesWithMinMaxRange/mint_less_than_head_max (0.00s)
    --- PASS: TestHeadLabelNamesValuesWithMinMaxRange/mint_and_maxt_outside_head (0.00s)
    --- PASS: TestHeadLabelNamesValuesWithMinMaxRange/mint_and_maxt_within_head (0.00s)
=== RUN   TestHeadLabelValuesWithMatchers
=== RUN   TestHeadLabelValuesWithMatchers/get_tens_based_on_unique_id
=== RUN   TestHeadLabelValuesWithMatchers/get_unique_ids_based_on_a_ten
=== RUN   TestHeadLabelValuesWithMatchers/get_tens_by_pattern_matching_on_unique_id
=== RUN   TestHeadLabelValuesWithMatchers/get_tens_by_matching_for_absence_of_unique_label
--- PASS: TestHeadLabelValuesWithMatchers (0.01s)
    --- PASS: TestHeadLabelValuesWithMatchers/get_tens_based_on_unique_id (0.00s)
    --- PASS: TestHeadLabelValuesWithMatchers/get_unique_ids_based_on_a_ten (0.00s)
    --- PASS: TestHeadLabelValuesWithMatchers/get_tens_by_pattern_matching_on_unique_id (0.00s)
    --- PASS: TestHeadLabelValuesWithMatchers/get_tens_by_matching_for_absence_of_unique_label (0.00s)
=== RUN   TestHeadLabelNamesWithMatchers
=== RUN   TestHeadLabelNamesWithMatchers/get_with_non-empty_unique:_all
=== RUN   TestHeadLabelNamesWithMatchers/get_with_unique_ending_in_1:_only_unique
=== RUN   TestHeadLabelNamesWithMatchers/get_with_unique_=_value20:_all
=== RUN   TestHeadLabelNamesWithMatchers/get_tens_=_1:_unique_&_tens
--- PASS: TestHeadLabelNamesWithMatchers (0.02s)
    --- PASS: TestHeadLabelNamesWithMatchers/get_with_non-empty_unique:_all (0.00s)
    --- PASS: TestHeadLabelNamesWithMatchers/get_with_unique_ending_in_1:_only_unique (0.00s)
    --- PASS: TestHeadLabelNamesWithMatchers/get_with_unique_=_value20:_all (0.00s)
    --- PASS: TestHeadLabelNamesWithMatchers/get_tens_=_1:_unique_&_tens (0.00s)
=== RUN   TestHeadMintAfterTruncation
--- PASS: TestHeadMintAfterTruncation (0.02s)
=== RUN   TestHeadExemplars
--- PASS: TestHeadExemplars (0.01s)
=== RUN   TestHeadInit_DiscardChunksWithUnsupportedEncoding
--- PASS: TestHeadInit_DiscardChunksWithUnsupportedEncoding (0.05s)
=== RUN   TestHeadMinOOOTimeUpdate
--- PASS: TestHeadMinOOOTimeUpdate (0.04s)
=== RUN   TestHeadDetectsDuplicateSampleAtSizeLimit
--- PASS: TestHeadDetectsDuplicateSampleAtSizeLimit (0.03s)
PASS
ok  	github.com/prometheus/prometheus/tsdb	27.810s
+ git checkout 9071913fd99fcdea9ea069b277f2be66b08e549c tsdb/head_test.go
Updated 1 path from b2b815ef3
