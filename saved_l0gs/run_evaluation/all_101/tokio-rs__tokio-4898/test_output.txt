+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   tokio/src/signal/unix/driver.rs

no changes added to commit (use "git add" and/or "git commit -a")
+ git diff 9d9488db67136651f85d839efcb5f61aba8531c9
diff --git a/tokio/src/signal/unix/driver.rs b/tokio/src/signal/unix/driver.rs
index e14a6d77..ba2edc35 100644
--- a/tokio/src/signal/unix/driver.rs
+++ b/tokio/src/signal/unix/driver.rs
@@ -74,11 +74,8 @@ impl Driver {
         let original =
             ManuallyDrop::new(unsafe { std::os::unix::net::UnixStream::from_raw_fd(receiver_fd) });
         let receiver = UnixStream::from_std(original.try_clone()?);
-        let receiver = PollEvented::new_with_interest_and_handle(
-            receiver,
-            Interest::READABLE | Interest::WRITABLE,
-            park.handle(),
-        )?;
+        let receiver =
+            PollEvented::new_with_interest_and_handle(receiver, Interest::READABLE, park.handle())?;
 
         Ok(Self {
             park,
+ git checkout 9d9488db67136651f85d839efcb5f61aba8531c9 tokio/tests/rt_metrics.rs
Updated 0 paths from d72faf0c
+ git apply -v -
Checking patch tokio/tests/rt_metrics.rs...
Applied patch tokio/tests/rt_metrics.rs cleanly.
+ RUSTFLAGS='--cfg tokio_unstable'
+ cargo test --features full --test rt_metrics
warning: `/testbed/.cargo/config` is deprecated in favor of `config.toml`
note: if you need to support cargo 1.38 or earlier, you can symlink `config` to `config.toml`
   Compiling tokio v1.20.1 (/testbed/tokio)
warning: unexpected `cfg` condition value: `128`
   --> tokio/src/lib.rs:390:5
    |
390 |     target_pointer_width = "128"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: expected values for `target_pointer_width` are: `16`, `32`, and `64`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/lib.rs:401:37
    |
401 |     all(target_arch = "wasm32", not(tokio_wasm)),
    |                                     ^^^^^^^^^^
    |
    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/lib.rs:402:37
    |
402 |     all(target_arch = "wasm64", not(tokio_wasm)),
    |                                     ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/lib.rs:403:37
    |
403 |     all(target_family = "wasm", not(tokio_wasm)),
    |                                     ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/lib.rs:404:33
    |
404 |     all(target_os = "wasi", not(tokio_wasm)),
    |                                 ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/lib.rs:405:33
    |
405 |     all(target_os = "wasi", not(tokio_wasi)),
    |                                 ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasm_not_wasi`
   --> tokio/src/lib.rs:406:29
    |
406 |     all(target_os = "wasi", tokio_wasm_not_wasi),
    |                             ^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm_not_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm_not_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/lib.rs:407:9
    |
407 |     all(tokio_wasm, not(any(target_arch = "wasm32", target_arch = "wasm64"))),
    |         ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasm_not_wasi`
   --> tokio/src/lib.rs:408:9
    |
408 |     all(tokio_wasm_not_wasi, not(tokio_wasm)),
    |         ^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm_not_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm_not_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/lib.rs:408:34
    |
408 |     all(tokio_wasm_not_wasi, not(tokio_wasm)),
    |                                  ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/lib.rs:409:9
    |
409 |     all(tokio_wasi, not(tokio_wasm))
    |         ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/lib.rs:409:25
    |
409 |     all(tokio_wasi, not(tokio_wasm))
    |                         ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/lib.rs:414:9
    |
414 |     not(tokio_unstable),
    |         ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/lib.rs:415:5
    |
415 |     tokio_wasm,
    |     ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
 --> tokio/src/io/mod.rs:1:13
  |
1 | #![cfg_attr(loom, allow(dead_code, unreachable_pub))]
  |             ^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
 --> tokio/src/net/mod.rs:1:12
  |
1 | #![cfg(not(loom))]
  |            ^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:64:23
    |
64  |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/lib.rs:435:1
    |
435 | / cfg_fs! {
436 | |     pub mod fs;
437 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_fs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
 --> tokio/src/fs/mod.rs:1:12
  |
1 | #![cfg(not(loom))]
  |            ^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:254:23
    |
254 |               #[cfg(not(loom))]
    |                         ^^^^
    |
   ::: tokio/src/lib.rs:447:1
    |
447 | / cfg_process! {
448 | |     pub mod process;
449 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_process` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:255:23
    |
255 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/lib.rs:447:1
    |
447 | / cfg_process! {
448 | |     pub mod process;
449 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_process` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:283:23
    |
283 |               #[cfg(not(loom))]
    |                         ^^^^
    |
   ::: tokio/src/lib.rs:465:1
    |
465 | / cfg_signal! {
466 | |     pub mod signal;
467 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_signal` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:284:23
    |
284 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/lib.rs:465:1
    |
465 | / cfg_signal! {
466 | |     pub mod signal;
467 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_signal` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:294:23
    |
294 |               #[cfg(not(loom))]
    |                         ^^^^
    |
   ::: tokio/src/lib.rs:469:1
    |
469 | / cfg_signal_internal! {
470 | |     #[cfg(not(feature = "signal"))]
471 | |     #[allow(dead_code)]
472 | |     #[allow(unreachable_pub)]
473 | |     pub(crate) mod signal;
474 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_signal_internal` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
 --> tokio/src/sync/mod.rs:1:13
  |
1 | #![cfg_attr(loom, allow(dead_code, unreachable_pub, unused_imports))]
  |             ^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:392:23
    |
392 |               #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/macros/mod.rs:21:1
    |
21  | / cfg_trace! {
22  | |     #[macro_use]
23  | |     mod trace;
24  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
 --> tokio/src/macros/thread_local.rs:1:11
  |
1 | #[cfg(all(loom, test))]
  |           ^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_no_const_thread_local`
  --> tokio/src/macros/thread_local.rs:13:11
   |
13 | #[cfg(not(tokio_no_const_thread_local))]
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_no_const_thread_local)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_no_const_thread_local)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
  --> tokio/src/macros/thread_local.rs:14:15
   |
14 | #[cfg(not(all(loom, test)))]
   |               ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_no_const_thread_local`
  --> tokio/src/macros/thread_local.rs:19:7
   |
19 | #[cfg(tokio_no_const_thread_local)]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_no_const_thread_local)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_no_const_thread_local)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_no_addr_of`
 --> tokio/src/macros/addr_of.rs:4:11
  |
4 | #[cfg(not(tokio_no_addr_of))]
  |           ^^^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_no_addr_of)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_no_addr_of)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_no_addr_of`
  --> tokio/src/macros/addr_of.rs:27:7
   |
27 | #[cfg(tokio_no_addr_of)]
   |       ^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_no_addr_of)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_no_addr_of)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:392:23
    |
392 |               #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/macros/trace.rs:1:1
    |
1   | / cfg_trace! {
2   | |     macro_rules! trace_op {
3   | |         ($name:expr, $readiness:literal) => {
4   | |             tracing::trace!(
...   |
25  | |     }
26  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:254:23
    |
254 |               #[cfg(not(loom))]
    |                         ^^^^
    |
   ::: tokio/src/future/mod.rs:11:1
    |
11  | / cfg_process! {
12  | |     mod try_join;
13  | |     pub(crate) use try_join::try_join3;
14  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_process` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:255:23
    |
255 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/future/mod.rs:11:1
    |
11  | / cfg_process! {
12  | |     mod try_join;
13  | |     pub(crate) use try_join::try_join3;
14  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_process` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:392:23
    |
392 |               #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/future/mod.rs:21:1
    |
21  | / cfg_trace! {
22  | |     mod trace;
23  | |     pub(crate) use trace::InstrumentedFuture as Future;
24  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:412:27
    |
412 |               #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                             ^^^^^^^^^^^^^^
    |
   ::: tokio/src/future/mod.rs:26:1
    |
26  | / cfg_not_trace! {
27  | |     cfg_rt! {
28  | |         pub(crate) use std::future::Future;
29  | |     }
30  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_trace` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/io/mod.rs:214:16
    |
214 |     #[cfg_attr(tokio_wasi, allow(unused_imports))]
    |                ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/io/mod.rs:217:15
    |
217 |     #[cfg(not(loom))]
    |               ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/io/mod.rs:218:16
    |
218 |     #[cfg_attr(tokio_wasi, allow(unused_imports))]
    |                ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:64:23
    |
64  |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/io/blocking.rs:271:1
    |
271 | / cfg_fs! {
272 | |     impl Buf {
273 | |         pub(crate) fn discard_read(&mut self) -> i64 {
274 | |             let ret = -(self.bytes().len() as i64);
...   |
279 | |     }
280 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_fs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:187:23
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/io/driver/mod.rs:293:5
    |
293 | /     cfg_metrics! {
294 | |         impl Handle {
295 | |             pub(crate) fn metrics(&self) -> &IoDriverMetrics {
296 | |                 &self.inner.metrics
297 | |             }
298 | |         }
299 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:187:43
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                                             ^^^^
    |
   ::: tokio/src/io/driver/mod.rs:293:5
    |
293 | /     cfg_metrics! {
294 | |         impl Handle {
295 | |             pub(crate) fn metrics(&self) -> &IoDriverMetrics {
296 | |                 &self.inner.metrics
297 | |             }
298 | |         }
299 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/io/driver/registration.rs:118:15
    |
118 |     #[cfg(not(tokio_wasi))]
    |               ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:205:63
    |
205 |           $( #[cfg(not(all(feature = "net", feature = "rt", all(tokio_unstable, not(loom)))))]$item )*
    |                                                                 ^^^^^^^^^^^^^^
    |
   ::: tokio/src/io/driver/metrics.rs:7:1
    |
7   | / cfg_not_rt_and_metrics_and_net! {
8   | |     #[derive(Default)]
9   | |     pub(crate) struct IoDriverMetrics {}
...   |
15  | |     }
16  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_rt_and_metrics_and_net` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:205:83
    |
205 |           $( #[cfg(not(all(feature = "net", feature = "rt", all(tokio_unstable, not(loom)))))]$item )*
    |                                                                                     ^^^^
    |
   ::: tokio/src/io/driver/metrics.rs:7:1
    |
7   | / cfg_not_rt_and_metrics_and_net! {
8   | |     #[derive(Default)]
9   | |     pub(crate) struct IoDriverMetrics {}
...   |
15  | |     }
16  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_rt_and_metrics_and_net` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:187:23
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/io/driver/metrics.rs:20:9
    |
20  | /         cfg_metrics! {
21  | |             pub(crate) use crate::runtime::IoDriverMetrics;
22  | |         }
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:187:43
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                                             ^^^^
    |
   ::: tokio/src/io/driver/metrics.rs:20:9
    |
20  | /         cfg_metrics! {
21  | |             pub(crate) use crate::runtime::IoDriverMetrics;
22  | |         }
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/io/driver/mod.rs:76:15
   |
76 |     #[cfg(not(tokio_wasi))]
   |               ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/io/driver/mod.rs:120:19
    |
120 |         #[cfg(not(tokio_wasi))]
    |                   ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/io/driver/mod.rs:135:27
    |
135 |                 #[cfg(not(tokio_wasi))]
    |                           ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/io/driver/mod.rs:171:19
    |
171 |             #[cfg(tokio_wasi)]
    |                   ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/io/driver/mod.rs:313:19
    |
313 |         #[cfg(not(tokio_wasi))]
    |                   ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:254:23
    |
254 |               #[cfg(not(loom))]
    |                         ^^^^
    |
   ::: tokio/src/io/util/mod.rs:56:5
    |
56  | /     cfg_process! {
57  | |         pub(crate) use read_to_end::read_to_end;
58  | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_process` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:255:23
    |
255 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/io/util/mod.rs:56:5
    |
56  | /     cfg_process! {
57  | |         pub(crate) use read_to_end::read_to_end;
58  | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_process` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:487:23
    |
487 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/net/mod.rs:26:1
    |
26  | / cfg_not_wasi! {
27  | |     #[cfg(feature = "net")]
28  | |     pub(crate) use addr::to_socket_addrs;
29  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_wasi` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:487:23
    |
487 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/net/mod.rs:39:5
    |
39  | /     cfg_not_wasi! {
40  | |         pub use tcp::socket::TcpSocket;
41  | |
42  | |         mod udp;
43  | |         pub use udp::UdpSocket;
44  | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_wasi` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:487:23
    |
487 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/net/tcp/mod.rs:5:1
    |
5   | / cfg_not_wasi! {
6   | |     pub(crate) mod socket;
7   | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_wasi` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:487:23
    |
487 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/net/tcp/listener.rs:4:1
    |
4   | / cfg_not_wasi! {
5   | |     use crate::net::{to_socket_addrs, ToSocketAddrs};
6   | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_wasi` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:402:19
    |
402 |               #[cfg(tokio_unstable)]
    |                     ^^^^^^^^^^^^^^
    |
   ::: tokio/src/net/tcp/listener.rs:405:1
    |
405 | / cfg_unstable! {
406 | |     #[cfg(tokio_wasi)]
407 | |     mod sys {
408 | |         use super::TcpListener;
...   |
416 | |     }
417 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_unstable` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/net/tcp/listener.rs:406:11
    |
406 |     #[cfg(tokio_wasi)]
    |           ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:487:23
    |
487 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/net/tcp/listener.rs:61:5
    |
61  | /     cfg_not_wasi! {
62  | |         /// Creates a new TcpListener, which will be bound to the specified address.
63  | |         ///
64  | |         /// The returned listener is ready for accepting connections.
...   |
124 | |         }
125 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_wasi` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:487:23
    |
487 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/net/tcp/listener.rs:288:5
    |
288 | /     cfg_not_wasi! {
289 | |         pub(crate) fn new(listener: mio::net::TcpListener) -> io::Result<TcpListener> {
290 | |             let io = PollEvented::new(listener)?;
291 | |             Ok(TcpListener { io })
292 | |         }
293 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_wasi` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/net/tcp/listener.rs:278:15
    |
278 |         #[cfg(tokio_wasi)]
    |               ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
    --> tokio/src/net/tcp/stream.rs:1337:11
     |
1337 | #[cfg(all(tokio_unstable, tokio_wasi))]
     |           ^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
    --> tokio/src/net/tcp/stream.rs:1337:27
     |
1337 | #[cfg(all(tokio_unstable, tokio_wasi))]
     |                           ^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:487:23
    |
487 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/net/tcp/stream.rs:1:1
    |
1   | / cfg_not_wasi! {
2   | |     use crate::future::poll_fn;
3   | |     use crate::net::{to_socket_addrs, ToSocketAddrs};
4   | |     use std::time::Duration;
5   | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_wasi` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:487:23
    |
487 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/net/tcp/stream.rs:76:5
    |
76  | /     cfg_not_wasi! {
77  | |         /// Opens a TCP connection to a remote host.
78  | |         ///
79  | |         /// `addr` is an address of the remote host. Anything which implements the
...   |
157 | |         }
158 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_wasi` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
    --> tokio/src/macros/cfg.rs:487:23
     |
487  |               #[cfg(not(tokio_wasi))]
     |                         ^^^^^^^^^^
     |
    ::: tokio/src/net/tcp/stream.rs:1096:5
     |
1096 | /     cfg_not_wasi! {
1097 | |         /// Reads the linger duration for this socket by getting the `SO_LINGER`
1098 | |         /// option.
1099 | |         ///
...    |
1143 | |         }
1144 | |     }
     | |_____- in this macro invocation
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
     = note: this warning originates in the macro `cfg_not_wasi` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/net/tcp/stream.rs:255:15
    |
255 |         #[cfg(tokio_wasi)]
    |               ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
 --> tokio/src/loom/mod.rs:6:21
  |
6 | #[cfg(not(all(test, loom)))]
  |                     ^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
 --> tokio/src/loom/std/mod.rs:1:40
  |
1 | #![cfg_attr(any(not(feature = "full"), loom), allow(unused_imports, dead_code))]
  |                                        ^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
 --> tokio/src/loom/mod.rs:8:21
  |
8 | #[cfg(not(all(test, loom)))]
  |                     ^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
  --> tokio/src/loom/mod.rs:11:17
   |
11 | #[cfg(all(test, loom))]
   |                 ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
  --> tokio/src/loom/mod.rs:13:17
   |
13 | #[cfg(all(test, loom))]
   |                 ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/macros/cfg.rs:462:21
    |
462 |                       tokio_wasm
    |                       ^^^^^^^^^^
    |
   ::: tokio/src/loom/std/atomic_u64.rs:9:1
    |
9   | / cfg_has_atomic_u64! {
10  | |     pub(crate) use std::sync::atomic::AtomicU64;
11  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_has_atomic_u64` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/macros/cfg.rs:477:21
    |
477 |                       tokio_wasm
    |                       ^^^^^^^^^^
    |
   ::: tokio/src/loom/std/atomic_u64.rs:13:1
    |
13  | / cfg_not_has_atomic_u64! {
14  | |     use crate::loom::sync::Mutex;
15  | |     use std::sync::atomic::Ordering;
...   |
85  | |     }
86  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_has_atomic_u64` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
  --> tokio/src/loom/std/parking_lot.rs:55:48
   |
55 |     #[cfg(all(feature = "parking_lot", not(all(loom, test)),))]
   |                                                ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/park/thread.rs:68:19
   |
68 |         #[cfg(not(tokio_wasi))]
   |                   ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/park/thread.rs:70:15
   |
70 |         #[cfg(tokio_wasi)]
   |               ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
    --> tokio/src/process/mod.rs:1398:21
     |
1398 | #[cfg(all(test, not(loom)))]
     |                     ^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/process/unix/orphan.rs:120:21
    |
120 | #[cfg(all(test, not(loom)))]
    |                     ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/process/unix/reap.rs:132:21
    |
132 | #[cfg(all(test, not(loom)))]
    |                     ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/macros/cfg.rs:64:23
   |
64 |               #[cfg(not(tokio_wasi))]
   |                         ^^^^^^^^^^
   |
  ::: tokio/src/blocking.rs:4:5
   |
4  | /     cfg_fs! {
5  | |         #[allow(unused_imports)]
6  | |         pub(crate) use crate::runtime::spawn_mandatory_blocking;
7  | |     }
   | |_____- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `cfg_fs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/task/mod.rs:140:17
    |
140 | #![cfg_attr(not(tokio_unstable), allow(dead_code))]
    |                 ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:187:23
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/mod.rs:185:1
    |
185 | / cfg_metrics! {
186 | |     mod metrics;
187 | |     pub use metrics::RuntimeMetrics;
...   |
193 | |     }
194 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:187:43
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                                             ^^^^
    |
   ::: tokio/src/runtime/mod.rs:185:1
    |
185 | / cfg_metrics! {
186 | |     mod metrics;
187 | |     pub use metrics::RuntimeMetrics;
...   |
193 | |     }
194 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:197:27
    |
197 |               #[cfg(not(all(tokio_unstable, not(loom))))]
    |                             ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/mod.rs:196:1
    |
196 | / cfg_not_metrics! {
197 | |     pub(crate) mod metrics;
198 | |     pub(crate) use metrics::{SchedulerMetrics, WorkerMetrics, MetricsBatch};
199 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:197:47
    |
197 |               #[cfg(not(all(tokio_unstable, not(loom))))]
    |                                                 ^^^^
    |
   ::: tokio/src/runtime/mod.rs:196:1
    |
196 | / cfg_not_metrics! {
197 | |     pub(crate) mod metrics;
198 | |     pub(crate) use metrics::{SchedulerMetrics, WorkerMetrics, MetricsBatch};
199 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/runtime/mod.rs:207:16
    |
207 |     #[cfg_attr(tokio_wasi, allow(unused_imports))]
    |                ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:392:23
    |
392 |               #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/mod.rs:210:5
    |
210 | /     cfg_trace! {
211 | |         pub(crate) use blocking::Mandatory;
212 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:64:23
    |
64  |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/runtime/mod.rs:214:5
    |
214 | /     cfg_fs! {
215 | |         pub(crate) use blocking::spawn_mandatory_blocking;
216 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_fs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:402:19
    |
402 |               #[cfg(tokio_unstable)]
    |                     ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/mod.rs:220:5
    |
220 | /     cfg_unstable! {
221 | |         pub use self::builder::UnhandledPanic;
222 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_unstable` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:344:56
    |
344 |               #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                          ^^^^^^^^^^
    |
   ::: tokio/src/runtime/mod.rs:237:1
    |
237 | / cfg_rt_multi_thread! {
238 | |     use driver::Driver;
239 | |
240 | |     pub(crate) mod thread_pool;
241 | |     use self::thread_pool::ThreadPool;
242 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/runtime/mod.rs:307:52
    |
307 |         #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                    ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:187:23
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/mod.rs:626:5
    |
626 | /     cfg_metrics! {
627 | |         impl Runtime {
628 | |             /// TODO
629 | |             pub fn metrics(&self) -> RuntimeMetrics {
...   |
632 | |         }
633 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:187:43
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                                             ^^^^
    |
   ::: tokio/src/runtime/mod.rs:626:5
    |
626 | /     cfg_metrics! {
627 | |         impl Runtime {
628 | |             /// TODO
629 | |             pub fn metrics(&self) -> RuntimeMetrics {
...   |
632 | |         }
633 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:344:56
    |
344 |               #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                          ^^^^^^^^^^
    |
   ::: tokio/src/runtime/enter.rs:69:1
    |
69  | / cfg_rt_multi_thread! {
70  | |     pub(crate) fn exit<F: FnOnce() -> R, R>(f: F) -> R {
71  | |         // Reset in case the closure panics
72  | |         struct Reset(EnterContext);
...   |
92  | |     }
93  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:344:56
    |
344 |               #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                          ^^^^^^^^^^
    |
   ::: tokio/src/runtime/enter.rs:134:1
    |
134 | / cfg_rt_multi_thread! {
135 | |     /// Returns true if in a runtime context.
136 | |     pub(crate) fn context() -> EnterContext {
137 | |         ENTERED.with(|c| c.get())
138 | |     }
139 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/task/mod.rs:158:31
    |
158 | #[cfg(all(feature = "rt", any(tokio_unstable, test)))]
    |                               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/task/mod.rs:162:31
    |
162 | #[cfg(all(feature = "rt", any(tokio_unstable, test)))]
    |                               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/task/mod.rs:203:16
    |
203 | #[cfg_attr(not(tokio_unstable), allow(unreachable_pub))]
    |                ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:344:56
    |
344 |               #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                          ^^^^^^^^^^
    |
   ::: tokio/src/runtime/task/mod.rs:153:1
    |
153 | / cfg_rt_multi_thread! {
154 | |     mod inject;
155 | |     pub(super) use self::inject::Inject;
156 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:344:56
    |
344 |               #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                          ^^^^^^^^^^
    |
   ::: tokio/src/runtime/task/mod.rs:349:1
    |
349 | / cfg_rt_multi_thread! {
350 | |     impl<S: 'static> Notified<S> {
351 | |         unsafe fn from_raw(ptr: NonNull<Header>) -> Notified<S> {
352 | |             Notified(Task::from_raw(ptr))
...   |
368 | |     }
369 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/runtime/task/core.rs:296:11
    |
296 | #[cfg(not(loom))]
    |           ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:344:56
    |
344 |               #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                          ^^^^^^^^^^
    |
   ::: tokio/src/runtime/task/core.rs:241:1
    |
241 | / cfg_rt_multi_thread! {
242 | |     impl Header {
243 | |         pub(super) unsafe fn set_next(&self, next: Option<NonNull<Header>>) {
244 | |             self.queue_next.with_mut(|ptr| *ptr = next);
245 | |         }
246 | |     }
247 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/runtime/task/core.rs:83:15
   |
83 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/task/core.rs:118:19
    |
118 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/task/core.rs:126:27
    |
126 |                 #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/task/error.rs:128:11
    |
128 |     #[cfg(tokio_unstable)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/task/harness.rs:290:15
    |
290 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/runtime/task/abort.rs:21:16
   |
21 | #[cfg_attr(not(tokio_unstable), allow(unreachable_pub))]
   |                ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/runtime/task/abort.rs:45:20
   |
45 |     #[cfg_attr(not(tokio_unstable), allow(unreachable_pub))]
   |                    ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/runtime/task/abort.rs:58:20
   |
58 |     #[cfg_attr(not(tokio_unstable), allow(unreachable_pub))]
   |                    ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/runtime/task/abort.rs:77:11
   |
77 |     #[cfg(tokio_unstable)]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/task/join.rs:254:15
    |
254 |     #[cfg(any(tokio_unstable, test))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/task/join.rs:272:11
    |
272 |     #[cfg(tokio_unstable)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/macros/cfg.rs:462:21
    |
462 |                       tokio_wasm
    |                       ^^^^^^^^^^
    |
   ::: tokio/src/runtime/task/list.rs:26:1
    |
26  | / cfg_has_atomic_u64! {
27  | |     use std::sync::atomic::{AtomicU64, Ordering};
28  | |
29  | |     static NEXT_OWNED_TASKS_ID: AtomicU64 = AtomicU64::new(1);
...   |
38  | |     }
39  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_has_atomic_u64` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/macros/cfg.rs:477:21
    |
477 |                       tokio_wasm
    |                       ^^^^^^^^^^
    |
   ::: tokio/src/runtime/task/list.rs:41:1
    |
41  | / cfg_not_has_atomic_u64! {
42  | |     use std::sync::atomic::{AtomicU32, Ordering};
43  | |
44  | |     static NEXT_OWNED_TASKS_ID: AtomicU32 = AtomicU32::new(1);
...   |
53  | |     }
54  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_has_atomic_u64` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:392:23
    |
392 |               #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/task/waker.rs:47:1
    |
47  | / cfg_trace! {
48  | |     macro_rules! trace {
49  | |         ($harness:expr, $op:expr) => {
50  | |             if let Some(id) = $harness.id() {
...   |
58  | |     }
59  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:412:27
    |
412 |               #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                             ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/task/waker.rs:61:1
    |
61  | / cfg_not_trace! {
62  | |     macro_rules! trace {
63  | |         ($harness:expr, $op:expr) => {
64  | |             // noop
...   |
67  | |     }
68  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_trace` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/macros/cfg.rs:462:21
    |
462 |                       tokio_wasm
    |                       ^^^^^^^^^^
    |
   ::: tokio/src/runtime/task/mod.rs:501:5
    |
501 | /     cfg_has_atomic_u64! {
502 | |         pub(crate) fn next() -> Self {
503 | |             use std::sync::atomic::{AtomicU64, Ordering::Relaxed};
504 | |             static NEXT_ID: AtomicU64 = AtomicU64::new(1);
505 | |             Self(NEXT_ID.fetch_add(1, Relaxed))
506 | |         }
507 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_has_atomic_u64` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasm`
   --> tokio/src/macros/cfg.rs:477:21
    |
477 |                       tokio_wasm
    |                       ^^^^^^^^^^
    |
   ::: tokio/src/runtime/task/mod.rs:509:5
    |
509 | /     cfg_not_has_atomic_u64! {
510 | |         pub(crate) fn next() -> Self {
511 | |             use once_cell::sync::Lazy;
512 | |             use crate::loom::sync::Mutex;
...   |
519 | |         }
520 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasm)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasm)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_has_atomic_u64` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:187:23
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/metrics/mod.rs:11:1
    |
11  | / cfg_metrics! {
12  | |     mod batch;
13  | |     pub(crate) use batch::MetricsBatch;
...   |
28  | |     }
29  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:187:43
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                                             ^^^^
    |
   ::: tokio/src/runtime/metrics/mod.rs:11:1
    |
11  | / cfg_metrics! {
12  | |     mod batch;
13  | |     pub(crate) use batch::MetricsBatch;
...   |
28  | |     }
29  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:197:27
    |
197 |               #[cfg(not(all(tokio_unstable, not(loom))))]
    |                             ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/metrics/mod.rs:31:1
    |
31  | / cfg_not_metrics! {
32  | |     mod mock;
33  | |
34  | |     pub(crate) use mock::{SchedulerMetrics, WorkerMetrics, MetricsBatch};
35  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:197:47
    |
197 |               #[cfg(not(all(tokio_unstable, not(loom))))]
    |                                                 ^^^^
    |
   ::: tokio/src/runtime/metrics/mod.rs:31:1
    |
31  | / cfg_not_metrics! {
32  | |     mod mock;
33  | |
34  | |     pub(crate) use mock::{SchedulerMetrics, WorkerMetrics, MetricsBatch};
35  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:344:56
    |
344 |               #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                          ^^^^^^^^^^
    |
   ::: tokio/src/runtime/metrics/batch.rs:95:1
    |
95  | / cfg_rt_multi_thread! {
96  | |     impl MetricsBatch {
97  | |         pub(crate) fn incr_steal_count(&mut self, by: u16) {
98  | |             self.steal_count += by as u64;
...   |
104 | |     }
105 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:187:23
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/basic_scheduler.rs:417:1
    |
417 | / cfg_metrics! {
418 | |     impl Spawner {
419 | |         pub(crate) fn scheduler_metrics(&self) -> &SchedulerMetrics {
420 | |             &self.shared.scheduler_metrics
...   |
436 | |     }
437 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:187:43
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                                             ^^^^
    |
   ::: tokio/src/runtime/basic_scheduler.rs:417:1
    |
417 | / cfg_metrics! {
418 | |     impl Spawner {
419 | |         pub(crate) fn scheduler_metrics(&self) -> &SchedulerMetrics {
420 | |             &self.shared.scheduler_metrics
...   |
436 | |     }
437 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/runtime/basic_scheduler.rs:84:11
   |
84 |     #[cfg(tokio_unstable)]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:402:19
    |
402 |               #[cfg(tokio_unstable)]
    |                     ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/basic_scheduler.rs:479:5
    |
479 | /     cfg_unstable! {
480 | |         fn unhandled_panic(&self) {
481 | |             use crate::runtime::UnhandledPanic;
...   |
505 | |         }
506 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_unstable` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/macros/cfg.rs:64:23
   |
64 |               #[cfg(not(tokio_wasi))]
   |                         ^^^^^^^^^^
   |
  ::: tokio/src/runtime/blocking/mod.rs:9:1
   |
9  | / cfg_fs! {
10 | |     pub(crate) use pool::spawn_mandatory_blocking;
11 | | }
   | |_- in this macro invocation
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
   = note: this warning originates in the macro `cfg_fs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/runtime/blocking/pool.rs:128:12
    |
128 | #[cfg_attr(tokio_wasi, allow(dead_code))]
    |            ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `fs`
  --> tokio/src/runtime/blocking/pool.rs:81:20
   |
81 |     #[cfg_attr(not(fs), allow(dead_code))]
   |                    ^^ help: found config with similar value: `feature = "fs"`
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(fs)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(fs)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:64:23
    |
64  |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/runtime/blocking/pool.rs:138:1
    |
138 | / cfg_fs! {
139 | |     #[cfg_attr(any(
140 | |         all(loom, not(test)), // the function is covered by loom tests
141 | |         test
...   |
154 | |     }
155 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_fs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/runtime/blocking/pool.rs:140:13
    |
140 |         all(loom, not(test)), // the function is covered by loom tests
    |             ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:402:19
    |
402 |               #[cfg(tokio_unstable)]
    |                     ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/builder.rs:92:1
    |
92  | / cfg_unstable! {
93  | |     /// How the runtime should respond to unhandled panics.
94  | |     ///
95  | |     /// Instances of `UnhandledPanic` are passed to `Builder::unhandled_panic`
...   |
170 | |     }
171 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_unstable` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:344:56
    |
344 |               #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                          ^^^^^^^^^^
    |
   ::: tokio/src/runtime/builder.rs:902:1
    |
902 | / cfg_rt_multi_thread! {
903 | |     impl Builder {
904 | |         fn build_threaded_runtime(&mut self) -> io::Result<Runtime> {
905 | |             use crate::loom::sys::num_cpus;
...   |
949 | |     }
950 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/runtime/builder.rs:88:11
   |
88 |     #[cfg(tokio_unstable)]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/runtime/builder.rs:177:48
    |
177 |     #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/runtime/builder.rs:457:15
    |
457 |     #[cfg(not(loom))]
    |               ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/runtime/builder.rs:482:15
    |
482 |     #[cfg(not(loom))]
    |               ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/runtime/builder.rs:560:15
    |
560 |     #[cfg(not(loom))]
    |               ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/runtime/builder.rs:595:15
    |
595 |     #[cfg(not(loom))]
    |               ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:487:23
    |
487 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/runtime/builder.rs:200:5
    |
200 | /     cfg_not_wasi! {
201 | |         /// Returns a new builder with the multi thread scheduler selected.
202 | |         ///
203 | |         /// Configuration methods can be chained on the return value.
...   |
209 | |         }
210 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_wasi` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:402:19
    |
402 |               #[cfg(tokio_unstable)]
    |                     ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/builder.rs:725:5
    |
725 | /     cfg_unstable! {
726 | |         /// Configure how the runtime responds to an unhandled panic on a
727 | |         /// spawned task.
728 | |         ///
...   |
783 | |         }
784 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_unstable` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/runtime/builder.rs:191:15
    |
191 |         #[cfg(loom)]
    |               ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/runtime/builder.rs:194:19
    |
194 |         #[cfg(not(loom))]
    |                   ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/builder.rs:253:19
    |
253 |             #[cfg(tokio_unstable)]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/runtime/builder.rs:622:56
    |
622 |             #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                        ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/runtime/builder.rs:631:60
    |
631 |                 #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                            ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/builder.rs:816:23
    |
816 |                 #[cfg(tokio_unstable)]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:294:23
    |
294 |               #[cfg(not(loom))]
    |                         ^^^^
    |
   ::: tokio/src/runtime/context.rs:39:1
    |
39  | / cfg_signal_internal! {
40  | |     #[cfg(unix)]
41  | |     pub(crate) fn signal_handle() -> crate::runtime::driver::SignalHandle {
42  | |         match CONTEXT.try_with(|ctx| {
...   |
49  | |     }
50  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_signal_internal` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:294:23
    |
294 |               #[cfg(not(loom))]
    |                         ^^^^
    |
   ::: tokio/src/runtime/driver.rs:55:1
    |
55  | / cfg_signal_internal_and_unix! {
56  | |     type SignalDriver = crate::signal::unix::driver::Driver;
57  | |     pub(crate) type SignalHandle = Option<crate::signal::unix::driver::Handle>;
...   |
63  | |     }
64  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_signal_internal` which comes from the expansion of the macro `cfg_signal_internal_and_unix` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:303:23
    |
303 |               #[cfg(any(loom, not(unix), not(any(feature = "signal", all(unix, feature = "process")))))]
    |                         ^^^^
    |
   ::: tokio/src/runtime/driver.rs:66:1
    |
66  | / cfg_not_signal_internal! {
67  | |     pub(crate) type SignalHandle = ();
68  | |
69  | |     cfg_io_driver! {
...   |
75  | |     }
76  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_signal_internal` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:264:19
    |
264 |           #[cfg(not(loom))]
    |                     ^^^^
    |
   ::: tokio/src/runtime/driver.rs:80:1
    |
80  | / cfg_process_driver! {
81  | |     type ProcessDriver = crate::process::unix::driver::Driver;
82  | |
83  | |     fn create_process_driver(signal_driver: SignalDriver) -> ProcessDriver {
84  | |         crate::process::unix::driver::Driver::new(signal_driver)
85  | |     }
86  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_process_driver` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:254:23
    |
254 |               #[cfg(not(loom))]
    |                         ^^^^
    |
   ::: tokio/src/runtime/driver.rs:80:1
    |
80  | / cfg_process_driver! {
81  | |     type ProcessDriver = crate::process::unix::driver::Driver;
82  | |
83  | |     fn create_process_driver(signal_driver: SignalDriver) -> ProcessDriver {
84  | |         crate::process::unix::driver::Driver::new(signal_driver)
85  | |     }
86  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_process` which comes from the expansion of the macro `cfg_process_driver` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:255:23
    |
255 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/runtime/driver.rs:80:1
    |
80  | / cfg_process_driver! {
81  | |     type ProcessDriver = crate::process::unix::driver::Driver;
82  | |
83  | |     fn create_process_driver(signal_driver: SignalDriver) -> ProcessDriver {
84  | |         crate::process::unix::driver::Driver::new(signal_driver)
85  | |     }
86  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_process` which comes from the expansion of the macro `cfg_process_driver` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:272:37
    |
272 |               #[cfg(not(all(unix, not(loom), feature = "process")))]
    |                                       ^^^^
    |
   ::: tokio/src/runtime/driver.rs:88:1
    |
88  | / cfg_not_process_driver! {
89  | |     cfg_io_driver! {
90  | |         type ProcessDriver = SignalDriver;
...   |
95  | |     }
96  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_process_driver` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
  --> tokio/src/runtime/driver.rs:18:15
   |
18 |         #[cfg(loom)]
   |               ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
  --> tokio/src/runtime/handle.rs:38:13
   |
38 |             loom,
   |             ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:187:23
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/handle.rs:329:1
    |
329 | / cfg_metrics! {
330 | |     use crate::runtime::RuntimeMetrics;
331 | |
332 | |     impl Handle {
...   |
338 | |     }
339 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:187:43
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                                             ^^^^
    |
   ::: tokio/src/runtime/handle.rs:329:1
    |
329 | / cfg_metrics! {
330 | |     use crate::runtime::RuntimeMetrics;
331 | |
332 | |     impl Handle {
...   |
338 | |     }
339 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/handle.rs:290:19
    |
290 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/handle.rs:313:19
    |
313 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:64:23
    |
64  |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/runtime/handle.rs:366:5
    |
366 | /     cfg_fs! {
367 | |         #[track_caller]
368 | |         #[cfg_attr(any(
369 | |             all(loom, not(test)), // the function is covered by loom tests
...   |
398 | |         }
399 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_fs` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/runtime/handle.rs:369:17
    |
369 |             all(loom, not(test)), // the function is covered by loom tests
    |                 ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/handle.rs:415:19
    |
415 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/handle.rs:431:23
    |
431 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:344:56
    |
344 |               #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                          ^^^^^^^^^^
    |
   ::: tokio/src/runtime/spawner.rs:6:1
    |
6   | / cfg_rt_multi_thread! {
7   | |     use crate::runtime::thread_pool;
8   | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/runtime/spawner.rs:13:48
   |
13 |     #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
   |                                                ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:187:23
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/spawner.rs:48:1
    |
48  | / cfg_metrics! {
49  | |     use crate::runtime::{SchedulerMetrics, WorkerMetrics};
50  | |
51  | |     impl Spawner {
...   |
91  | |     }
92  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:187:43
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                                             ^^^^
    |
   ::: tokio/src/runtime/spawner.rs:48:1
    |
48  | / cfg_metrics! {
49  | |     use crate::runtime::{SchedulerMetrics, WorkerMetrics};
50  | |
51  | |     impl Spawner {
...   |
91  | |     }
92  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/runtime/spawner.rs:19:52
   |
19 |         #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
   |                                                    ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/runtime/spawner.rs:34:56
   |
34 |             #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
   |                                                        ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/runtime/spawner.rs:42:56
   |
42 |             #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
   |                                                        ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/runtime/spawner.rs:55:60
   |
55 |                 #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
   |                                                            ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/runtime/spawner.rs:63:60
   |
63 |                 #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
   |                                                            ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/runtime/spawner.rs:71:60
   |
71 |                 #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
   |                                                            ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/runtime/spawner.rs:79:60
   |
79 |                 #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
   |                                                            ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
  --> tokio/src/runtime/spawner.rs:87:60
   |
87 |                 #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
   |                                                            ^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:187:23
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/thread_pool/mod.rs:127:1
    |
127 | / cfg_metrics! {
128 | |     use crate::runtime::{SchedulerMetrics, WorkerMetrics};
129 | |
130 | |     impl Spawner {
...   |
150 | |     }
151 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:187:43
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                                             ^^^^
    |
   ::: tokio/src/runtime/thread_pool/mod.rs:127:1
    |
127 | / cfg_metrics! {
128 | |     use crate::runtime::{SchedulerMetrics, WorkerMetrics};
129 | |
130 | |     impl Spawner {
...   |
150 | |     }
151 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
  --> tokio/src/runtime/thread_pool/queue.rs:45:11
   |
45 | #[cfg(not(loom))]
   |           ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
  --> tokio/src/runtime/thread_pool/queue.rs:51:7
   |
51 | #[cfg(loom)]
   |       ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:187:23
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/thread_pool/queue.rs:459:1
    |
459 | / cfg_metrics! {
460 | |     impl<T> Steal<T> {
461 | |         pub(crate) fn len(&self) -> usize {
462 | |             self.0.len() as _
463 | |         }
464 | |     }
465 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:187:43
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                                             ^^^^
    |
   ::: tokio/src/runtime/thread_pool/queue.rs:459:1
    |
459 | / cfg_metrics! {
460 | |     impl<T> Steal<T> {
461 | |         pub(crate) fn len(&self) -> usize {
462 | |             self.0.len() as _
463 | |         }
464 | |     }
465 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:187:23
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/runtime/thread_pool/worker.rs:885:1
    |
885 | / cfg_metrics! {
886 | |     impl Shared {
887 | |         pub(super) fn injection_queue_depth(&self) -> usize {
888 | |             self.inject.len()
...   |
894 | |     }
895 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:187:43
    |
187 |               #[cfg(all(tokio_unstable, not(loom)))]
    |                                             ^^^^
    |
   ::: tokio/src/runtime/thread_pool/worker.rs:885:1
    |
885 | / cfg_metrics! {
886 | |     impl Shared {
887 | |         pub(super) fn injection_queue_depth(&self) -> usize {
888 | |             self.inject.len()
...   |
894 | |     }
895 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_metrics` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:487:23
    |
487 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/runtime/mod.rs:315:9
    |
315 | /         cfg_not_wasi! {
316 | |             /// Creates a new runtime instance with default configuration values.
317 | |             ///
318 | |             /// This results in the multi threaded scheduler, I/O driver, and time driver being
...   |
349 | |             }
350 | |         }
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_wasi` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/runtime/mod.rs:480:23
    |
480 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/runtime/mod.rs:487:60
    |
487 |                 #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                            ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/runtime/mod.rs:617:60
    |
617 |                 #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                            ^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/coop.rs:206:21
    |
206 | #[cfg(all(test, not(loom)))]
    |                     ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:344:56
    |
344 |               #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                          ^^^^^^^^^^
    |
   ::: tokio/src/coop.rs:111:1
    |
111 | / cfg_rt_multi_thread! {
112 | |     /// Sets the current task's budget.
113 | |     pub(crate) fn set(budget: Budget) {
114 | |         CURRENT.with(|cell| cell.set(budget))
115 | |     }
116 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/signal/registry.rs:170:21
    |
170 | #[cfg(all(test, not(loom)))]
    |                     ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/signal/unix.rs:499:21
    |
499 | #[cfg(all(test, not(loom)))]
    |                     ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
 --> tokio/src/sync/barrier.rs:3:11
  |
3 | #[cfg(all(tokio_unstable, feature = "tracing"))]
  |           ^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/barrier.rs:46:15
   |
46 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/barrier.rs:73:19
   |
73 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                   ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/barrier.rs:107:23
    |
107 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/barrier.rs:121:19
    |
121 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/barrier.rs:131:23
    |
131 |         #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/barrier.rs:146:23
    |
146 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/barrier.rs:152:23
    |
152 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/barrier.rs:158:27
    |
158 |                 #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/mpsc/mod.rs:108:44
    |
108 | #[cfg(all(target_pointer_width = "64", not(loom)))]
    |                                            ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/mpsc/mod.rs:111:49
    |
111 | #[cfg(all(not(target_pointer_width = "64"), not(loom)))]
    |                                                 ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/mpsc/mod.rs:114:7
    |
114 | #[cfg(loom)]
    |       ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/loom.rs:3:15
    |
3   |           #[cfg(loom)]
    |                 ^^^^
    |
   ::: tokio/src/sync/mpsc/block.rs:367:9
    |
367 | /         if_loom! {
368 | |             let p = vals.as_mut_ptr() as *mut UnsafeCell<MaybeUninit<T>>;
369 | |             for i in 0..BLOCK_CAP {
370 | |                 p.add(i)
371 | |                     .write(UnsafeCell::new(MaybeUninit::uninit()));
372 | |             }
373 | |         }
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `if_loom` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/loom.rs:5:19
    |
5   |           #[cfg(not(loom))]
    |                     ^^^^
    |
   ::: tokio/src/sync/mpsc/block.rs:367:9
    |
367 | /         if_loom! {
368 | |             let p = vals.as_mut_ptr() as *mut UnsafeCell<MaybeUninit<T>>;
369 | |             for i in 0..BLOCK_CAP {
370 | |                 p.add(i)
371 | |                     .write(UnsafeCell::new(MaybeUninit::uninit()));
372 | |             }
373 | |         }
    | |_________- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `if_loom` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
 --> tokio/src/sync/mutex.rs:4:11
  |
4 | #[cfg(all(tokio_unstable, feature = "tracing"))]
  |           ^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/mutex.rs:221:11
    |
221 | #[cfg(not(loom))]
    |           ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:129:15
    |
129 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:146:15
    |
146 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:167:15
    |
167 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/mutex.rs:302:48
    |
302 |     #[cfg(all(feature = "parking_lot", not(all(loom, test)),))]
    |                                                ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:259:19
    |
259 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:273:19
    |
273 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:282:23
    |
282 |         #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:288:23
    |
288 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:311:23
    |
311 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:340:19
    |
340 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:350:19
    |
350 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:358:23
    |
358 |         #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:363:23
    |
363 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:454:19
    |
454 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:464:19
    |
464 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:472:19
    |
472 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:475:23
    |
475 |         #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:480:23
    |
480 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:513:27
    |
513 |                 #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:523:31
    |
523 |                     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:582:27
    |
582 |                 #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:590:27
    |
590 |                 #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:595:31
    |
595 |                     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:781:19
    |
781 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/mutex.rs:850:19
    |
850 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/notify.rs:324:48
    |
324 |     #[cfg(all(feature = "parking_lot", not(all(loom, test))))]
    |                                                ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:125:11
    |
125 | #[cfg(all(tokio_unstable, feature = "tracing"))]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:220:15
    |
220 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:320:15
    |
320 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:322:15
    |
322 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:324:15
    |
324 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:465:15
    |
465 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:526:15
    |
526 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:530:15
    |
530 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:522:19
    |
522 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:536:19
    |
536 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:538:19
    |
538 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:540:19
    |
540 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:614:19
    |
614 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:696:19
    |
696 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:698:19
    |
698 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:706:23
    |
706 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:839:23
    |
839 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/oneshot.rs:914:23
    |
914 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
    --> tokio/src/sync/oneshot.rs:1004:35
     |
1004 |                         #[cfg(all(tokio_unstable, feature = "tracing"))]
     |                                   ^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
    --> tokio/src/sync/oneshot.rs:1066:23
     |
1066 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
     |                       ^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
    --> tokio/src/sync/oneshot.rs:1083:19
     |
1083 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
     |                   ^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
    --> tokio/src/sync/oneshot.rs:1085:19
     |
1085 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
     |                   ^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
    --> tokio/src/sync/oneshot.rs:1087:19
     |
1087 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
     |                   ^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
    --> tokio/src/sync/oneshot.rs:1091:23
     |
1091 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
     |                       ^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
    --> tokio/src/sync/oneshot.rs:1094:27
     |
1094 |             #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
     |                           ^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/batch_semaphore.rs:22:11
   |
22 | #[cfg(all(tokio_unstable, feature = "tracing"))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/batch_semaphore.rs:40:15
   |
40 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:108:15
    |
108 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/batch_semaphore.rs:184:48
    |
184 |     #[cfg(all(feature = "parking_lot", not(all(loom, test))))]
    |                                                ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:148:19
    |
148 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:173:23
    |
173 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:196:23
    |
196 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:330:27
    |
330 |                 #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:432:19
    |
432 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:403:39
    |
403 | ...                   #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                                 ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:487:19
    |
487 |         #[cfg(all(tokio_unstable, feature = "tracing"))] ctx: trace::AsyncOpTracingCtx,
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:493:23
    |
493 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:510:31
    |
510 |                     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:530:19
    |
530 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:532:19
    |
532 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:534:19
    |
534 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:540:19
    |
540 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:546:23
    |
546 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:562:19
    |
562 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:565:23
    |
565 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:572:23
    |
572 |         #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/batch_semaphore.rs:580:19
    |
580 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
 --> tokio/src/sync/semaphore.rs:3:11
  |
3 | #[cfg(all(tokio_unstable, feature = "tracing"))]
  |           ^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/semaphore.rs:111:11
    |
111 | #[cfg(not(loom))]
    |           ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/semaphore.rs:82:15
   |
82 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/semaphore.rs:167:48
    |
167 |     #[cfg(all(feature = "parking_lot", not(all(loom, test))))]
    |                                                ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:129:19
    |
129 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:144:19
    |
144 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:147:23
    |
147 |         #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:152:23
    |
152 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:170:19
    |
170 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:176:23
    |
176 |         #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:229:19
    |
229 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:237:23
    |
237 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:276:19
    |
276 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:286:23
    |
286 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:411:19
    |
411 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:419:23
    |
419 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:475:19
    |
475 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/semaphore.rs:483:23
    |
483 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
 --> tokio/src/sync/rwlock.rs:3:11
  |
3 | #[cfg(all(tokio_unstable, feature = "tracing"))]
  |           ^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
  --> tokio/src/sync/rwlock.rs:24:11
   |
24 | #[cfg(not(loom))]
   |           ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
  --> tokio/src/sync/rwlock.rs:27:7
   |
27 | #[cfg(loom)]
   |       ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/rwlock.rs:105:11
    |
105 | #[cfg(not(loom))]
    |           ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock.rs:91:15
   |
91 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/owned_read_guard.rs:18:15
   |
18 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/owned_read_guard.rs:61:19
   |
61 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                   ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/owned_read_guard.rs:70:23
   |
70 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                       ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/owned_read_guard.rs:115:19
    |
115 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/owned_read_guard.rs:124:23
    |
124 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/owned_read_guard.rs:161:19
    |
161 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/owned_write_guard.rs:19:15
   |
19 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/owned_write_guard.rs:69:19
   |
69 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                   ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/owned_write_guard.rs:79:23
   |
79 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                       ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/owned_write_guard.rs:133:19
    |
133 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/owned_write_guard.rs:144:23
    |
144 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/owned_write_guard.rs:201:19
    |
201 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/owned_write_guard.rs:210:19
    |
210 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/owned_write_guard.rs:219:19
    |
219 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/owned_write_guard.rs:228:23
    |
228 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/owned_write_guard.rs:269:19
    |
269 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/owned_write_guard_mapped.rs:18:15
   |
18 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/owned_write_guard_mapped.rs:68:19
   |
68 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                   ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/owned_write_guard_mapped.rs:78:23
   |
78 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                       ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/owned_write_guard_mapped.rs:130:19
    |
130 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/owned_write_guard_mapped.rs:140:23
    |
140 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/owned_write_guard_mapped.rs:181:19
    |
181 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/read_guard.rs:17:15
   |
17 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/read_guard.rs:65:19
   |
65 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                   ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/read_guard.rs:74:23
   |
74 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                       ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/read_guard.rs:124:19
    |
124 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/read_guard.rs:133:23
    |
133 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/read_guard.rs:169:19
    |
169 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/write_guard.rs:19:15
   |
19 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/write_guard.rs:72:19
   |
72 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                   ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/write_guard.rs:81:23
   |
81 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                       ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/write_guard.rs:139:19
    |
139 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/write_guard.rs:148:23
    |
148 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/write_guard.rs:205:19
    |
205 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/write_guard.rs:214:19
    |
214 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/write_guard.rs:223:19
    |
223 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/write_guard.rs:232:23
    |
232 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/write_guard.rs:274:19
    |
274 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/write_guard_mapped.rs:17:15
   |
17 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
   |               ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/write_guard_mapped.rs:69:19
   |
69 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                   ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/sync/rwlock/write_guard_mapped.rs:79:23
   |
79 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                       ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/write_guard_mapped.rs:136:19
    |
136 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/write_guard_mapped.rs:146:23
    |
146 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock/write_guard_mapped.rs:188:19
    |
188 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/rwlock.rs:339:48
    |
339 |     #[cfg(all(feature = "parking_lot", not(all(loom, test))))]
    |                                                ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/rwlock.rs:364:48
    |
364 |     #[cfg(all(feature = "parking_lot", not(all(loom, test))))]
    |                                                ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:210:19
    |
210 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:242:19
    |
242 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:245:23
    |
245 |         #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:252:23
    |
252 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:282:19
    |
282 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:315:19
    |
315 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:318:23
    |
318 |         #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:325:23
    |
325 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:349:23
    |
349 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:375:23
    |
375 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:426:19
    |
426 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:435:23
    |
435 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:444:19
    |
444 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:457:23
    |
457 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:567:19
    |
567 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:576:23
    |
576 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:585:19
    |
585 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:594:19
    |
594 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:601:23
    |
601 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:645:19
    |
645 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:658:23
    |
658 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:708:19
    |
708 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:717:19
    |
717 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:724:23
    |
724 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:758:19
    |
758 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:767:23
    |
767 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:776:19
    |
776 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:790:23
    |
790 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:886:19
    |
886 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:895:23
    |
895 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:904:19
    |
904 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:913:19
    |
913 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:921:23
    |
921 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:956:19
    |
956 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/sync/rwlock.rs:970:23
    |
970 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
    --> tokio/src/sync/rwlock.rs:1012:19
     |
1012 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
     |                   ^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
    --> tokio/src/sync/rwlock.rs:1021:19
     |
1021 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
     |                   ^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
    --> tokio/src/sync/rwlock.rs:1029:23
     |
1029 |             #[cfg(all(tokio_unstable, feature = "tracing"))]
     |                       ^^^^^^^^^^^^^^
     |
     = help: consider using a Cargo feature instead
     = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
              [lints.rust]
              unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
     = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
     = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
 --> tokio/src/sync/task/atomic_waker.rs:1:17
  |
1 | #![cfg_attr(any(loom, not(feature = "sync")), allow(dead_code, unreachable_pub))]
  |                 ^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/once_cell.rs:174:48
    |
174 |     #[cfg(all(feature = "parking_lot", not(all(loom, test))))]
    |                                                ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/sync/watch.rs:967:17
    |
967 | #[cfg(all(test, loom))]
    |                 ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:264:19
    |
264 |           #[cfg(not(loom))]
    |                     ^^^^
    |
   ::: tokio/src/sync/watch.rs:555:5
    |
555 | /     cfg_process_driver! {
556 | |         pub(crate) fn try_has_changed(&mut self) -> Option<Result<(), error::RecvError>> {
557 | |             maybe_changed(&self.shared, &mut self.version)
558 | |         }
559 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_process_driver` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/macros/cfg.rs:254:23
    |
254 |               #[cfg(not(loom))]
    |                         ^^^^
    |
   ::: tokio/src/sync/watch.rs:555:5
    |
555 | /     cfg_process_driver! {
556 | |         pub(crate) fn try_has_changed(&mut self) -> Option<Result<(), error::RecvError>> {
557 | |             maybe_changed(&self.shared, &mut self.version)
558 | |         }
559 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_process` which comes from the expansion of the macro `cfg_process_driver` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:255:23
    |
255 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/sync/watch.rs:555:5
    |
555 | /     cfg_process_driver! {
556 | |         pub(crate) fn try_has_changed(&mut self) -> Option<Result<(), error::RecvError>> {
557 | |             maybe_changed(&self.shared, &mut self.version)
558 | |         }
559 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_process` which comes from the expansion of the macro `cfg_process_driver` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:487:23
    |
487 |               #[cfg(not(tokio_wasi))]
    |                         ^^^^^^^^^^
    |
   ::: tokio/src/task/mod.rs:281:5
    |
281 | /     cfg_not_wasi! {
282 | |         mod blocking;
283 | |         pub use blocking::spawn_blocking;
284 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_wasi` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:344:56
    |
344 |               #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                          ^^^^^^^^^^
    |
   ::: tokio/src/task/mod.rs:289:5
    |
289 | /     cfg_rt_multi_thread! {
290 | |         pub use blocking::block_in_place;
291 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:402:19
    |
402 |               #[cfg(tokio_unstable)]
    |                     ^^^^^^^^^^^^^^
    |
   ::: tokio/src/task/mod.rs:296:5
    |
296 | /     cfg_unstable! {
297 | |         mod consume_budget;
298 | |         pub use consume_budget::consume_budget;
299 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_unstable` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:402:19
    |
402 |               #[cfg(tokio_unstable)]
    |                     ^^^^^^^^^^^^^^
    |
   ::: tokio/src/task/mod.rs:310:5
    |
310 | /     cfg_unstable! {
311 | |         pub mod join_set;
312 | |         #[doc(inline)]
313 | |         pub use join_set::JoinSet;
314 | |         pub use crate::runtime::task::{Id, AbortHandle};
315 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_unstable` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:392:23
    |
392 |               #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/task/mod.rs:317:5
    |
317 | /     cfg_trace! {
318 | |         mod builder;
319 | |         pub use builder::Builder;
320 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:344:56
    |
344 |               #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                          ^^^^^^^^^^
    |
   ::: tokio/src/task/blocking.rs:3:1
    |
3   | / cfg_rt_multi_thread! {
4   | |     /// Runs the provided blocking function on the current thread without
5   | |     /// blocking the executor.
6   | |     ///
...   |
78  | |     }
79  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:402:19
    |
402 |               #[cfg(tokio_unstable)]
    |                     ^^^^^^^^^^^^^^
    |
   ::: tokio/src/task/local.rs:638:1
    |
638 | / cfg_unstable! {
639 | |     impl LocalSet {
640 | |         /// Configure how the `LocalSet` responds to an unhandled panic on a
641 | |         /// spawned task.
...   |
706 | |     }
707 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_unstable` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/task/local.rs:251:11
    |
251 |     #[cfg(tokio_unstable)]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/task/local.rs:361:27
    |
361 |                     #[cfg(tokio_unstable)]
    |                           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:402:19
    |
402 |               #[cfg(tokio_unstable)]
    |                     ^^^^^^^^^^^^^^
    |
   ::: tokio/src/task/local.rs:880:5
    |
880 | /     cfg_unstable! {
881 | |         fn unhandled_panic(&self) {
882 | |             use crate::runtime::UnhandledPanic;
...   |
903 | |         }
904 | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_unstable` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_no_const_thread_local`
  --> tokio/src/task/task_local.rs:50:11
   |
50 | #[cfg(not(tokio_no_const_thread_local))]
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_no_const_thread_local)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_no_const_thread_local)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_no_const_thread_local`
  --> tokio/src/task/task_local.rs:66:7
   |
66 | #[cfg(tokio_no_const_thread_local)]
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_no_const_thread_local)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_no_const_thread_local)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/task/join_set.rs:67:11
   |
67 | #[cfg(all(tokio_unstable, feature = "tracing"))]
   |           ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/task/join_set.rs:359:11
    |
359 | #[cfg(all(tokio_unstable, feature = "tracing"))]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/task/join_set.rs:456:11
    |
456 | #[cfg(all(tokio_unstable, feature = "tracing"))]
    |           ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/task/join_set.rs:115:15
    |
115 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/time/driver/wheel/mod.rs:308:21
    |
308 | #[cfg(all(test, not(loom)))]
    |                     ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/time/driver/wheel/level.rs:259:21
    |
259 | #[cfg(all(test, not(loom)))]
    |                     ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
 --> tokio/src/time/driver/sleep.rs:1:11
  |
1 | #[cfg(all(tokio_unstable, feature = "tracing"))]
  |           ^^^^^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:392:23
    |
392 |               #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/time/driver/sleep.rs:237:1
    |
237 | / cfg_trace! {
238 | |     #[derive(Debug)]
239 | |     struct Inner {
240 | |         deadline: Instant,
...   |
243 | |     }
244 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:412:27
    |
412 |               #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                             ^^^^^^^^^^^^^^
    |
   ::: tokio/src/time/driver/sleep.rs:246:1
    |
246 | / cfg_not_trace! {
247 | |     #[derive(Debug)]
248 | |     struct Inner {
249 | |         deadline: Instant,
250 | |     }
251 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_trace` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/driver/sleep.rs:254:24
    |
254 |     #[cfg_attr(not(all(tokio_unstable, feature = "tracing")), allow(unused_variables))]
    |                        ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/driver/sleep.rs:263:19
    |
263 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/driver/sleep.rs:306:23
    |
306 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/driver/sleep.rs:366:19
    |
366 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/driver/sleep.rs:395:19
    |
395 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/driver/sleep.rs:401:23
    |
401 |         #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/driver/sleep.rs:409:19
    |
409 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/driver/sleep.rs:412:23
    |
412 |         #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/driver/sleep.rs:430:19
    |
430 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/driver/sleep.rs:432:19
    |
432 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/driver/sleep.rs:434:19
    |
434 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/interval.rs:114:20
    |
114 | #[cfg_attr(not(all(tokio_unstable, feature = "tracing")), allow(unused_variables))]
    |                    ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/interval.rs:402:15
    |
402 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/interval.rs:120:15
    |
120 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/interval.rs:134:15
    |
134 |     #[cfg(all(tokio_unstable, feature = "tracing"))]
    |               ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/interval.rs:137:19
    |
137 |     #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/interval.rs:144:19
    |
144 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/interval.rs:433:19
    |
433 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/interval.rs:435:19
    |
435 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/time/interval.rs:443:23
    |
443 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
    |                       ^^^^^^^^^^^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:402:19
    |
402 |               #[cfg(tokio_unstable)]
    |                     ^^^^^^^^^^^^^^
    |
   ::: tokio/src/util/mod.rs:47:5
    |
47  | /     cfg_unstable! {
48  | |         mod idle_notified_set;
49  | |         pub(crate) use idle_notified_set::IdleNotifiedSet;
50  | |     }
    | |_____- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_unstable` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_wasi`
   --> tokio/src/macros/cfg.rs:344:56
    |
344 |               #[cfg(all(feature = "rt-multi-thread", not(tokio_wasi)))]
    |                                                          ^^^^^^^^^^
    |
   ::: tokio/src/util/mod.rs:63:1
    |
63  | / cfg_rt_multi_thread! {
64  | |     pub(crate) use self::rand::FastRand;
65  | |
66  | |     mod try_lock;
67  | |     pub(crate) use try_lock::TryLock;
68  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_rt_multi_thread` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `loom`
   --> tokio/src/util/slab.rs:632:21
    |
632 | #[cfg(all(test, not(loom)))]
    |                     ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
  --> tokio/src/util/try_lock.rs:33:15
   |
33 |     #[cfg(not(loom))]
   |               ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `loom`
  --> tokio/src/util/try_lock.rs:39:11
   |
39 |     #[cfg(loom)]
   |           ^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:392:23
    |
392 |               #[cfg(all(tokio_unstable, feature = "tracing"))]
    |                         ^^^^^^^^^^^^^^
    |
   ::: tokio/src/util/trace.rs:1:1
    |
1   | / cfg_trace! {
2   | |     cfg_rt! {
3   | |         use core::{
4   | |             pin::Pin,
...   |
80  | |     }
81  | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_trace` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
   --> tokio/src/macros/cfg.rs:412:27
    |
412 |               #[cfg(any(not(tokio_unstable), not(feature = "tracing")))]
    |                             ^^^^^^^^^^^^^^
    |
   ::: tokio/src/util/trace.rs:92:1
    |
92  | / cfg_not_trace! {
93  | |     cfg_rt! {
94  | |         #[inline]
95  | |         pub(crate) fn task<F>(task: F, _: &'static str, _name: Option<&str>, _: u64) -> F {
...   |
99  | |     }
100 | | }
    | |_- in this macro invocation
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: this warning originates in the macro `cfg_not_trace` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/util/trace.rs:85:19
   |
85 |         #[cfg(all(tokio_unstable, feature = "tracing"))]
   |                   ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition name: `tokio_unstable`
  --> tokio/src/util/trace.rs:87:23
   |
87 |         #[cfg(not(all(tokio_unstable, feature = "tracing")))]
   |                       ^^^^^^^^^^^^^^
   |
   = help: consider using a Cargo feature instead
   = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
            [lints.rust]
            unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
   = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: method `id` is never used
  --> tokio/src/process/unix/orphan.rs:11:8
   |
9  | pub(crate) trait Wait {
   |                  ---- method in this trait
10 |     /// Get the identifier for this process or diagnostics.
11 |     fn id(&self) -> u32;
   |        ^^
   |
   = note: `#[warn(dead_code)]` on by default

   Compiling tokio-stream v0.1.9 (/testbed/tokio-stream)
warning: unexpected `cfg` condition name: `loom`
   --> tokio-stream/src/stream_map.rs:601:19
    |
601 |         #[cfg(not(loom))]
    |                   ^^^^
    |
    = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
    = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `loom`
   --> tokio-stream/src/stream_map.rs:623:15
    |
623 |         #[cfg(loom)]
    |               ^^^^
    |
    = help: consider using a Cargo feature instead
    = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
             [lints.rust]
             unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
    = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
    = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

   Compiling tokio-test v0.4.2 (/testbed/tokio-test)
warning: `tokio-stream` (lib) generated 2 warnings
warning: unexpected `cfg` condition name: `loom`
 --> tokio-test/src/io.rs:1:12
  |
1 | #![cfg(not(loom))]
  |            ^^^^
  |
  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(loom)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(loom)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: `tokio` (lib) generated 450 warnings
warning: `tokio-test` (lib) generated 1 warning
warning: unexpected `cfg` condition name: `tokio_unstable`
 --> tokio/tests/rt_metrics.rs:2:30
  |
2 | #![cfg(all(feature = "full", tokio_unstable, not(tokio_wasi)))]
  |                              ^^^^^^^^^^^^^^
  |
  = help: expected names are: `clippy`, `debug_assertions`, `doc`, `docsrs`, `doctest`, `feature`, `miri`, `overflow_checks`, `panic`, `proc_macro`, `relocation_model`, `rustfmt`, `sanitize`, `sanitizer_cfi_generalize_pointers`, `sanitizer_cfi_normalize_integers`, `target_abi`, `target_arch`, `target_endian`, `target_env`, `target_family`, `target_feature`, `target_has_atomic`, `target_has_atomic_equal_alignment`, `target_has_atomic_load_store`, `target_os`, `target_pointer_width`, `target_thread_local`, `target_vendor`, `test`, `ub_checks`, `unix`, and `windows`
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_unstable)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_unstable)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition name: `tokio_wasi`
 --> tokio/tests/rt_metrics.rs:2:50
  |
2 | #![cfg(all(feature = "full", tokio_unstable, not(tokio_wasi)))]
  |                                                  ^^^^^^^^^^
  |
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(tokio_wasi)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(tokio_wasi)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: `tokio` (test "rt_metrics") generated 2 warnings
    Finished `test` profile [unoptimized + debuginfo] target(s) in 8.17s
     Running tests/rt_metrics.rs (target/debug/deps/rt_metrics-03f61bf258ed8224)

running 13 tests
test worker_local_schedule_count ... ok
test injection_queue_depth ... ok
test num_workers ... ok
test worker_local_queue_depth ... ok
test remote_schedule_count ... ok
test worker_steal_count ... ok
test io_driver_fd_count ... ok
test worker_total_busy_duration ... ok
test worker_noop_count ... ok
test worker_overflow_count ... ok
test worker_poll_count ... ok
test io_driver_ready_count ... ok
test worker_park_count ... ok

test result: ok. 13 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s

+ git checkout 9d9488db67136651f85d839efcb5f61aba8531c9 tokio/tests/rt_metrics.rs
Updated 1 path from d72faf0c
