+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
	modified:   benchmarks (modified content)
	modified:   src/diff/index.js
	modified:   src/internal.d.ts

no changes added to commit (use "git add" and/or "git commit -a")
+ git diff db0f4f2e7a2338ea40050f623f05505a798fc1a4
diff --git a/benchmarks b/benchmarks
--- a/benchmarks
+++ b/benchmarks
@@ -1 +1 @@
-Subproject commit 0e3f96775fc12229ee91761b15547aa7b297393c
+Subproject commit 0e3f96775fc12229ee91761b15547aa7b297393c-dirty
diff --git a/src/diff/index.js b/src/diff/index.js
index 34d38028..3e4b17bd 100644
--- a/src/diff/index.js
+++ b/src/diff/index.js
@@ -554,14 +554,26 @@ function diffElementNodes(
 
 /**
  * Invoke or update a ref, depending on whether it is a function or object ref.
- * @param {Ref<any>} ref
+ * @param {Ref<any> & { _unmount?: unknown }} ref
  * @param {any} value
  * @param {VNode} vnode
  */
 export function applyRef(ref, value, vnode) {
 	try {
-		if (typeof ref == 'function') ref(value);
-		else ref.current = value;
+		if (typeof ref == 'function') {
+			let hasRefUnmount = typeof ref._unmount == 'function';
+			if (hasRefUnmount) {
+				// @ts-ignore TS doesn't like moving narrowing checks into variables
+				ref._unmount();
+			}
+
+			if (!hasRefUnmount || value != null) {
+				// Store the cleanup function on the function
+				// instance object itself to avoid shape
+				// transitioning vnode
+				ref._unmount = ref(value);
+			}
+		} else ref.current = value;
 	} catch (e) {
 		options._catchError(e, vnode);
 	}
diff --git a/src/internal.d.ts b/src/internal.d.ts
index ab03abc6..cbf23b38 100644
--- a/src/internal.d.ts
+++ b/src/internal.d.ts
@@ -126,7 +126,10 @@ declare global {
 	// We use the `current` property to differentiate between the two kinds of Refs so
 	// internally we'll define `current` on both to make TypeScript happy
 	type RefObject<T> = { current: T | null };
-	type RefCallback<T> = { (instance: T | null): void; current: undefined };
+	type RefCallback<T> = {
+		(instance: T | null): void | (() => void);
+		current: undefined;
+	};
 	type Ref<T> = RefObject<T> | RefCallback<T>;
 
 	export interface VNode<P = {}> extends preact.VNode<P> {
+ git checkout db0f4f2e7a2338ea40050f623f05505a798fc1a4 test/browser/refs.test.js
Updated 0 paths from d083654d
+ git apply -v -
Checking patch test/browser/refs.test.js...
Applied patch test/browser/refs.test.js cleanly.
+ COVERAGE=false
+ BABEL_NO_MODULES=true
+ npx karma start karma.conf.js --single-run --grep=test/browser/refs.test.js

START:
[32m04 10 2024 12:52:39.062:INFO [esbuild]: [39mCompiling...
[32m04 10 2024 12:52:41.293:INFO [esbuild]: [39mCompiling done (2s)
[32m04 10 2024 12:52:41.296:INFO [karma-server]: [39mKarma v6.4.3 server started at http://localhost:9876/
[32m04 10 2024 12:52:41.297:INFO [launcher]: [39mLaunching browsers ChromeNoSandboxHeadless with concurrency 2
[32m04 10 2024 12:52:41.301:INFO [launcher]: [39mStarting browser Chrome
[32m04 10 2024 12:52:42.601:INFO [Chrome Headless 129.0.0.0 (Linux x86_64)]: [39mConnected on socket VUea3xrqjJOi2dL9AAAB with id 54574677
  refs
    âœ” should invoke refs in render()
    âœ” should not call stale refs
    âœ” should support createRef
    âœ” should invoke refs in Component.render()
    âœ” should pass components to ref functions
    âœ” should have a consistent order
    âœ” should pass rendered DOM from functional components to ref functions
    âœ” should pass children to ref functions
    âœ” should pass high-order children to ref functions
    âœ” should not pass ref into component as a prop
    âœ” should only null refs after unmount
    âœ” should null and re-invoke refs when swapping component root element type
    âœ” should add refs to components representing DOM nodes with no attributes if they have been pre-rendered
    âœ” should call ref after children are rendered
    âœ” should correctly set nested child refs
    âœ” should correctly call child refs for un-keyed children on re-render
    âœ” should not remove refs for memoized components keyed
    âœ” should not remove refs for memoized components unkeyed
    âœ” should properly call null for memoized components keyed
    âœ” should properly call null for memoized components unkeyed
    âœ” should first clean-up refs and after apply them
    âœ” should bind refs before componentDidMount
    âœ” should call refs after element is added to document on initial mount
    âœ” should call refs after element is added to document on update
    âœ” should call ref cleanup on unmount
    âœ” should call ref cleanup when ref changes

Finished in 0.074 secs / 0.05 secs @ 12:52:43 GMT+0000 (Coordinated Universal Time)

SUMMARY:
âœ” 26 tests completed
+ git checkout db0f4f2e7a2338ea40050f623f05505a798fc1a4 test/browser/refs.test.js
Updated 1 path from d083654d
